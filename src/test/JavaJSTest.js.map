{"version":3,"file":"JavaJSTest.js","sources":["../../../../../src/commonMain/kotlin/agents/RandomAgent.kt","../kotlin/arrayUtils.kt","../kotlin/kotlin/math.kt","../kotlin/util/Standard.kt","../kotlin/generated/_Collections.kt","../kotlin/comparisons/Comparisons.kt","../kotlin/kotlin/Comparator.kt","../kotlin/kotlin/collections.kt","../kotlin/text/Strings.kt","../../../../../src/commonMain/kotlin/games/tetris/TetrisGame.kt","../../../../../src/jsMain/kotlin/sample/SampleJs.kt","../../../../../src/commonMain/kotlin/agents/DoNothingAgent.kt","../../../../../src/commonMain/kotlin/agents/MutationTransducer.kt","../kotlin/generated/_Arrays.kt","../../../../../src/commonMain/kotlin/agents/SimpleEvoAgent.kt","../../../../../src/commonMain/kotlin/games/griddle/GriddleController.kt","../../../../../src/commonMain/kotlin/games/griddle/GriddleState.kt","../../../../../src/commonMain/kotlin/games/griddle/GriddleView.kt","../../../../../src/commonMain/kotlin/games/griddle/ai/Player.kt","../kotlin/collections/Maps.kt","../../../../../src/commonMain/kotlin/games/griddle/deck/StatDeck.kt","../kotlin/generated/_ArraysJs.kt","../../../../../src/commonMain/kotlin/games/griddle/words/GridScan.kt","../../../../../src/commonMain/kotlin/games/griddle/words/GridUtil.kt","../../../../../src/commonMain/kotlin/games/griddle/words/TrieDict.kt","../../../../../src/commonMain/kotlin/games/tetris/TetrisController.kt","../../../../../src/commonMain/kotlin/games/tetris/TetrisModel.kt","../../../../../src/commonMain/kotlin/games/tetris/TetrisValueFunctions.kt","../../../../../src/commonMain/kotlin/games/tetris/TetrisView.kt","../../../../../src/commonMain/kotlin/games/tetris/Tetrons.kt","../../../../../src/commonMain/kotlin/ggik/GameSpeedTest.kt","../../../../../src/commonMain/kotlin/gui/XGraphics.kt","../../../../../src/commonMain/kotlin/math/Vec2d.kt","../../../../../src/commonMain/kotlin/util/StatSummary.kt","../../../../../src/jsMain/kotlin/test/XGraphicsJS.kt","../kotlin/org.w3c/org.w3c.dom.kt"],"sourcesContent":[null,null,null,"/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"StandardKt\")\npackage kotlin\n\nimport kotlin.contracts.*\n\n/**\n * An exception is thrown to indicate that a method body remains to be implemented.\n */\npublic class NotImplementedError(message: String = \"An operation is not implemented.\") : Error(message)\n\n/**\n * Always throws [NotImplementedError] stating that operation is not implemented.\n */\n\n@kotlin.internal.InlineOnly\npublic inline fun TODO(): Nothing = throw NotImplementedError()\n\n/**\n * Always throws [NotImplementedError] stating that operation is not implemented.\n *\n * @param reason a string explaining why the implementation is missing.\n */\n@kotlin.internal.InlineOnly\npublic inline fun TODO(reason: String): Nothing = throw NotImplementedError(\"An operation is not implemented: $reason\")\n\n\n\n/**\n * Calls the specified function [block] and returns its result.\n *\n * For detailed usage information see the documentation for [scope functions](https://kotlinlang.org/docs/reference/scope-functions.html#run).\n */\n@kotlin.internal.InlineOnly\npublic inline fun <R> run(block: () -> R): R {\n    contract {\n        callsInPlace(block, InvocationKind.EXACTLY_ONCE)\n    }\n    return block()\n}\n\n/**\n * Calls the specified function [block] with `this` value as its receiver and returns its result.\n *\n * For detailed usage information see the documentation for [scope functions](https://kotlinlang.org/docs/reference/scope-functions.html#run).\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T, R> T.run(block: T.() -> R): R {\n    contract {\n        callsInPlace(block, InvocationKind.EXACTLY_ONCE)\n    }\n    return block()\n}\n\n/**\n * Calls the specified function [block] with the given [receiver] as its receiver and returns its result.\n *\n * For detailed usage information see the documentation for [scope functions](https://kotlinlang.org/docs/reference/scope-functions.html#with).\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T, R> with(receiver: T, block: T.() -> R): R {\n    contract {\n        callsInPlace(block, InvocationKind.EXACTLY_ONCE)\n    }\n    return receiver.block()\n}\n\n/**\n * Calls the specified function [block] with `this` value as its receiver and returns `this` value.\n *\n * For detailed usage information see the documentation for [scope functions](https://kotlinlang.org/docs/reference/scope-functions.html#apply).\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> T.apply(block: T.() -> Unit): T {\n    contract {\n        callsInPlace(block, InvocationKind.EXACTLY_ONCE)\n    }\n    block()\n    return this\n}\n\n/**\n * Calls the specified function [block] with `this` value as its argument and returns `this` value.\n *\n * For detailed usage information see the documentation for [scope functions](https://kotlinlang.org/docs/reference/scope-functions.html#also).\n */\n@kotlin.internal.InlineOnly\n@SinceKotlin(\"1.1\")\npublic inline fun <T> T.also(block: (T) -> Unit): T {\n    contract {\n        callsInPlace(block, InvocationKind.EXACTLY_ONCE)\n    }\n    block(this)\n    return this\n}\n\n/**\n * Calls the specified function [block] with `this` value as its argument and returns its result.\n *\n * For detailed usage information see the documentation for [scope functions](https://kotlinlang.org/docs/reference/scope-functions.html#let).\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T, R> T.let(block: (T) -> R): R {\n    contract {\n        callsInPlace(block, InvocationKind.EXACTLY_ONCE)\n    }\n    return block(this)\n}\n\n/**\n * Returns `this` value if it satisfies the given [predicate] or `null`, if it doesn't.\n */\n@kotlin.internal.InlineOnly\n@SinceKotlin(\"1.1\")\npublic inline fun <T> T.takeIf(predicate: (T) -> Boolean): T? {\n    contract {\n        callsInPlace(predicate, InvocationKind.EXACTLY_ONCE)\n    }\n    return if (predicate(this)) this else null\n}\n\n/**\n * Returns `this` value if it _does not_ satisfy the given [predicate] or `null`, if it does.\n */\n@kotlin.internal.InlineOnly\n@SinceKotlin(\"1.1\")\npublic inline fun <T> T.takeUnless(predicate: (T) -> Boolean): T? {\n    contract {\n        callsInPlace(predicate, InvocationKind.EXACTLY_ONCE)\n    }\n    return if (!predicate(this)) this else null\n}\n\n/**\n * Executes the given function [action] specified number of [times].\n *\n * A zero-based index of current iteration is passed as a parameter to [action].\n *\n * @sample samples.misc.ControlFlow.repeat\n */\n@kotlin.internal.InlineOnly\npublic inline fun repeat(times: Int, action: (Int) -> Unit) {\n    contract { callsInPlace(action) }\n\n    for (index in 0 until times) {\n        action(index)\n    }\n}\n","/*\n * Copyright 2010-2019 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"CollectionsKt\")\n\npackage kotlin.collections\n\n//\n// NOTE: THIS FILE IS AUTO-GENERATED by the GenerateStandardLib.kt\n// See: https://github.com/JetBrains/kotlin/tree/master/libraries/stdlib\n//\n\nimport kotlin.random.*\nimport kotlin.ranges.contains\nimport kotlin.ranges.reversed\n\n/**\n * Returns 1st *element* from the list.\n * \n * Throws an [IndexOutOfBoundsException] if the size of this list is less than 1.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> List<T>.component1(): T {\n    return get(0)\n}\n\n/**\n * Returns 2nd *element* from the list.\n * \n * Throws an [IndexOutOfBoundsException] if the size of this list is less than 2.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> List<T>.component2(): T {\n    return get(1)\n}\n\n/**\n * Returns 3rd *element* from the list.\n * \n * Throws an [IndexOutOfBoundsException] if the size of this list is less than 3.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> List<T>.component3(): T {\n    return get(2)\n}\n\n/**\n * Returns 4th *element* from the list.\n * \n * Throws an [IndexOutOfBoundsException] if the size of this list is less than 4.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> List<T>.component4(): T {\n    return get(3)\n}\n\n/**\n * Returns 5th *element* from the list.\n * \n * Throws an [IndexOutOfBoundsException] if the size of this list is less than 5.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> List<T>.component5(): T {\n    return get(4)\n}\n\n/**\n * Returns `true` if [element] is found in the collection.\n */\npublic operator fun <@kotlin.internal.OnlyInputTypes T> Iterable<T>.contains(element: T): Boolean {\n    if (this is Collection)\n        return contains(element)\n    return indexOf(element) >= 0\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this collection.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic fun <T> Iterable<T>.elementAt(index: Int): T {\n    if (this is List)\n        return get(index)\n    return elementAtOrElse(index) { throw IndexOutOfBoundsException(\"Collection doesn't contain element at index $index.\") }\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this list.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> List<T>.elementAt(index: Int): T {\n    return get(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this collection.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\npublic fun <T> Iterable<T>.elementAtOrElse(index: Int, defaultValue: (Int) -> T): T {\n    if (this is List)\n        return this.getOrElse(index, defaultValue)\n    if (index < 0)\n        return defaultValue(index)\n    val iterator = iterator()\n    var count = 0\n    while (iterator.hasNext()) {\n        val element = iterator.next()\n        if (index == count++)\n            return element\n    }\n    return defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this list.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> List<T>.elementAtOrElse(index: Int, defaultValue: (Int) -> T): T {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this collection.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\npublic fun <T> Iterable<T>.elementAtOrNull(index: Int): T? {\n    if (this is List)\n        return this.getOrNull(index)\n    if (index < 0)\n        return null\n    val iterator = iterator()\n    var count = 0\n    while (iterator.hasNext()) {\n        val element = iterator.next()\n        if (index == count++)\n            return element\n    }\n    return null\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this list.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> List<T>.elementAtOrNull(index: Int): T? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.find(predicate: (T) -> Boolean): T? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.findLast(predicate: (T) -> Boolean): T? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> List<T>.findLast(predicate: (T) -> Boolean): T? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the collection is empty.\n */\npublic fun <T> Iterable<T>.first(): T {\n    when (this) {\n        is List -> return this.first()\n        else -> {\n            val iterator = iterator()\n            if (!iterator.hasNext())\n                throw NoSuchElementException(\"Collection is empty.\")\n            return iterator.next()\n        }\n    }\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the list is empty.\n */\npublic fun <T> List<T>.first(): T {\n    if (isEmpty())\n        throw NoSuchElementException(\"List is empty.\")\n    return this[0]\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun <T> Iterable<T>.first(predicate: (T) -> Boolean): T {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Collection contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element, or `null` if the collection is empty.\n */\npublic fun <T> Iterable<T>.firstOrNull(): T? {\n    when (this) {\n        is List -> {\n            if (isEmpty())\n                return null\n            else\n                return this[0]\n        }\n        else -> {\n            val iterator = iterator()\n            if (!iterator.hasNext())\n                return null\n            return iterator.next()\n        }\n    }\n}\n\n/**\n * Returns the first element, or `null` if the list is empty.\n */\npublic fun <T> List<T>.firstOrNull(): T? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\npublic inline fun <T> Iterable<T>.firstOrNull(predicate: (T) -> Boolean): T? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this list.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> List<T>.getOrElse(index: Int, defaultValue: (Int) -> T): T {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this list.\n */\npublic fun <T> List<T>.getOrNull(index: Int): T? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns first index of [element], or -1 if the collection does not contain element.\n */\npublic fun <@kotlin.internal.OnlyInputTypes T> Iterable<T>.indexOf(element: T): Int {\n    if (this is List) return this.indexOf(element)\n    var index = 0\n    for (item in this) {\n        checkIndexOverflow(index)\n        if (element == item)\n            return index\n        index++\n    }\n    return -1\n}\n\n/**\n * Returns first index of [element], or -1 if the list does not contain element.\n */\n@Suppress(\"EXTENSION_SHADOWED_BY_MEMBER\") // false warning, extension takes precedence in some cases\npublic fun <@kotlin.internal.OnlyInputTypes T> List<T>.indexOf(element: T): Int {\n    return indexOf(element)\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the collection does not contain such element.\n */\npublic inline fun <T> Iterable<T>.indexOfFirst(predicate: (T) -> Boolean): Int {\n    var index = 0\n    for (item in this) {\n        checkIndexOverflow(index)\n        if (predicate(item))\n            return index\n        index++\n    }\n    return -1\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the list does not contain such element.\n */\npublic inline fun <T> List<T>.indexOfFirst(predicate: (T) -> Boolean): Int {\n    var index = 0\n    for (item in this) {\n        if (predicate(item))\n            return index\n        index++\n    }\n    return -1\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the collection does not contain such element.\n */\npublic inline fun <T> Iterable<T>.indexOfLast(predicate: (T) -> Boolean): Int {\n    var lastIndex = -1\n    var index = 0\n    for (item in this) {\n        checkIndexOverflow(index)\n        if (predicate(item))\n            lastIndex = index\n        index++\n    }\n    return lastIndex\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the list does not contain such element.\n */\npublic inline fun <T> List<T>.indexOfLast(predicate: (T) -> Boolean): Int {\n    val iterator = this.listIterator(size)\n    while (iterator.hasPrevious()) {\n        if (predicate(iterator.previous())) {\n            return iterator.nextIndex()\n        }\n    }\n    return -1\n}\n\n/**\n * Returns the last element.\n * @throws [NoSuchElementException] if the collection is empty.\n */\npublic fun <T> Iterable<T>.last(): T {\n    when (this) {\n        is List -> return this.last()\n        else -> {\n            val iterator = iterator()\n            if (!iterator.hasNext())\n                throw NoSuchElementException(\"Collection is empty.\")\n            var last = iterator.next()\n            while (iterator.hasNext())\n                last = iterator.next()\n            return last\n        }\n    }\n}\n\n/**\n * Returns the last element.\n * @throws [NoSuchElementException] if the list is empty.\n */\npublic fun <T> List<T>.last(): T {\n    if (isEmpty())\n        throw NoSuchElementException(\"List is empty.\")\n    return this[lastIndex]\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun <T> Iterable<T>.last(predicate: (T) -> Boolean): T {\n    var last: T? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            last = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Collection contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return last as T\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun <T> List<T>.last(predicate: (T) -> Boolean): T {\n    val iterator = this.listIterator(size)\n    while (iterator.hasPrevious()) {\n        val element = iterator.previous()\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"List contains no element matching the predicate.\")\n}\n\n/**\n * Returns last index of [element], or -1 if the collection does not contain element.\n */\npublic fun <@kotlin.internal.OnlyInputTypes T> Iterable<T>.lastIndexOf(element: T): Int {\n    if (this is List) return this.lastIndexOf(element)\n    var lastIndex = -1\n    var index = 0\n    for (item in this) {\n        checkIndexOverflow(index)\n        if (element == item)\n            lastIndex = index\n        index++\n    }\n    return lastIndex\n}\n\n/**\n * Returns last index of [element], or -1 if the list does not contain element.\n */\n@Suppress(\"EXTENSION_SHADOWED_BY_MEMBER\") // false warning, extension takes precedence in some cases\npublic fun <@kotlin.internal.OnlyInputTypes T> List<T>.lastIndexOf(element: T): Int {\n    return lastIndexOf(element)\n}\n\n/**\n * Returns the last element, or `null` if the collection is empty.\n */\npublic fun <T> Iterable<T>.lastOrNull(): T? {\n    when (this) {\n        is List -> return if (isEmpty()) null else this[size - 1]\n        else -> {\n            val iterator = iterator()\n            if (!iterator.hasNext())\n                return null\n            var last = iterator.next()\n            while (iterator.hasNext())\n                last = iterator.next()\n            return last\n        }\n    }\n}\n\n/**\n * Returns the last element, or `null` if the list is empty.\n */\npublic fun <T> List<T>.lastOrNull(): T? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\npublic inline fun <T> Iterable<T>.lastOrNull(predicate: (T) -> Boolean): T? {\n    var last: T? = null\n    for (element in this) {\n        if (predicate(element)) {\n            last = element\n        }\n    }\n    return last\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\npublic inline fun <T> List<T>.lastOrNull(predicate: (T) -> Boolean): T? {\n    val iterator = this.listIterator(size)\n    while (iterator.hasPrevious()) {\n        val element = iterator.previous()\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns a random element from this collection.\n * \n * @throws NoSuchElementException if this collection is empty.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> Collection<T>.random(): T {\n    return random(Random)\n}\n\n/**\n * Returns a random element from this collection using the specified source of randomness.\n * \n * @throws NoSuchElementException if this collection is empty.\n */\n@SinceKotlin(\"1.3\")\npublic fun <T> Collection<T>.random(random: Random): T {\n    if (isEmpty())\n        throw NoSuchElementException(\"Collection is empty.\")\n    return elementAt(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this collection, or `null` if this collection is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun <T> Collection<T>.randomOrNull(): T? {\n    return randomOrNull(Random)\n}\n\n/**\n * Returns a random element from this collection using the specified source of randomness, or `null` if this collection is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic fun <T> Collection<T>.randomOrNull(random: Random): T? {\n    if (isEmpty())\n        return null\n    return elementAt(random.nextInt(size))\n}\n\n/**\n * Returns the single element, or throws an exception if the collection is empty or has more than one element.\n */\npublic fun <T> Iterable<T>.single(): T {\n    when (this) {\n        is List -> return this.single()\n        else -> {\n            val iterator = iterator()\n            if (!iterator.hasNext())\n                throw NoSuchElementException(\"Collection is empty.\")\n            val single = iterator.next()\n            if (iterator.hasNext())\n                throw IllegalArgumentException(\"Collection has more than one element.\")\n            return single\n        }\n    }\n}\n\n/**\n * Returns the single element, or throws an exception if the list is empty or has more than one element.\n */\npublic fun <T> List<T>.single(): T {\n    return when (size) {\n        0 -> throw NoSuchElementException(\"List is empty.\")\n        1 -> this[0]\n        else -> throw IllegalArgumentException(\"List has more than one element.\")\n    }\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\npublic inline fun <T> Iterable<T>.single(predicate: (T) -> Boolean): T {\n    var single: T? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Collection contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Collection contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as T\n}\n\n/**\n * Returns single element, or `null` if the collection is empty or has more than one element.\n */\npublic fun <T> Iterable<T>.singleOrNull(): T? {\n    when (this) {\n        is List -> return if (size == 1) this[0] else null\n        else -> {\n            val iterator = iterator()\n            if (!iterator.hasNext())\n                return null\n            val single = iterator.next()\n            if (iterator.hasNext())\n                return null\n            return single\n        }\n    }\n}\n\n/**\n * Returns single element, or `null` if the list is empty or has more than one element.\n */\npublic fun <T> List<T>.singleOrNull(): T? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\npublic inline fun <T> Iterable<T>.singleOrNull(predicate: (T) -> Boolean): T? {\n    var single: T? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun <T> Iterable<T>.drop(n: Int): List<T> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return toList()\n    val list: ArrayList<T>\n    if (this is Collection<*>) {\n        val resultSize = size - n\n        if (resultSize <= 0)\n            return emptyList()\n        if (resultSize == 1)\n            return listOf(last())\n        list = ArrayList<T>(resultSize)\n        if (this is List<T>) {\n            if (this is RandomAccess) {\n                for (index in n until size)\n                    list.add(this[index])\n            } else {\n                for (item in listIterator(n))\n                    list.add(item)\n            }\n            return list\n        }\n    }\n    else {\n        list = ArrayList<T>()\n    }\n    var count = 0\n    for (item in this) {\n        if (count >= n) list.add(item) else ++count\n    }\n    return list.optimizeReadOnlyList()\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun <T> List<T>.dropLast(n: Int): List<T> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun <T> List<T>.dropLastWhile(predicate: (T) -> Boolean): List<T> {\n    if (!isEmpty()) {\n        val iterator = listIterator(size)\n        while (iterator.hasPrevious()) {\n            if (!predicate(iterator.previous())) {\n                return take(iterator.nextIndex() + 1)\n            }\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun <T> Iterable<T>.dropWhile(predicate: (T) -> Boolean): List<T> {\n    var yielding = false\n    val list = ArrayList<T>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\npublic inline fun <T> Iterable<T>.filter(predicate: (T) -> Boolean): List<T> {\n    return filterTo(ArrayList<T>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun <T> Iterable<T>.filterIndexed(predicate: (index: Int, T) -> Boolean): List<T> {\n    return filterIndexedTo(ArrayList<T>(), predicate)\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun <T, C : MutableCollection<in T>> Iterable<T>.filterIndexedTo(destination: C, predicate: (index: Int, T) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Returns a list containing all elements that are instances of specified type parameter R.\n */\npublic inline fun <reified R> Iterable<*>.filterIsInstance(): List<@kotlin.internal.NoInfer R> {\n    return filterIsInstanceTo(ArrayList<R>())\n}\n\n/**\n * Appends all elements that are instances of specified type parameter R to the given [destination].\n */\npublic inline fun <reified R, C : MutableCollection<in R>> Iterable<*>.filterIsInstanceTo(destination: C): C {\n    for (element in this) if (element is R) destination.add(element)\n    return destination\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\npublic inline fun <T> Iterable<T>.filterNot(predicate: (T) -> Boolean): List<T> {\n    return filterNotTo(ArrayList<T>(), predicate)\n}\n\n/**\n * Returns a list containing all elements that are not `null`.\n * \n * @sample samples.collections.Collections.Filtering.filterNotNull\n */\npublic fun <T : Any> Iterable<T?>.filterNotNull(): List<T> {\n    return filterNotNullTo(ArrayList<T>())\n}\n\n/**\n * Appends all elements that are not `null` to the given [destination].\n */\npublic fun <C : MutableCollection<in T>, T : Any> Iterable<T?>.filterNotNullTo(destination: C): C {\n    for (element in this) if (element != null) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n */\npublic inline fun <T, C : MutableCollection<in T>> Iterable<T>.filterNotTo(destination: C, predicate: (T) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n */\npublic inline fun <T, C : MutableCollection<in T>> Iterable<T>.filterTo(destination: C, predicate: (T) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun <T> List<T>.slice(indices: IntRange): List<T> {\n    if (indices.isEmpty()) return listOf()\n    return this.subList(indices.start, indices.endInclusive + 1).toList()\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\npublic fun <T> List<T>.slice(indices: Iterable<Int>): List<T> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<T>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns a list containing first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun <T> Iterable<T>.take(n: Int): List<T> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (this is Collection<T>) {\n        if (n >= size) return toList()\n        if (n == 1) return listOf(first())\n    }\n    var count = 0\n    val list = ArrayList<T>(n)\n    for (item in this) {\n        list.add(item)\n        if (++count == n)\n            break\n    }\n    return list.optimizeReadOnlyList()\n}\n\n/**\n * Returns a list containing last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun <T> List<T>.takeLast(n: Int): List<T> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(last())\n    val list = ArrayList<T>(n)\n    if (this is RandomAccess) {\n        for (index in size - n until size)\n            list.add(this[index])\n    } else {\n        for (item in listIterator(size - n))\n            list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun <T> List<T>.takeLastWhile(predicate: (T) -> Boolean): List<T> {\n    if (isEmpty())\n        return emptyList()\n    val iterator = listIterator(size)\n    while (iterator.hasPrevious()) {\n        if (!predicate(iterator.previous())) {\n            iterator.next()\n            val expectedSize = size - iterator.nextIndex()\n            if (expectedSize == 0) return emptyList()\n            return ArrayList<T>(expectedSize).apply {\n                while (iterator.hasNext())\n                    add(iterator.next())\n            }\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun <T> Iterable<T>.takeWhile(predicate: (T) -> Boolean): List<T> {\n    val list = ArrayList<T>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Reverses elements in the list in-place.\n */\npublic expect fun <T> MutableList<T>.reverse(): Unit\n\n/**\n * Returns a list with elements in reversed order.\n */\npublic fun <T> Iterable<T>.reversed(): List<T> {\n    if (this is Collection && size <= 1) return toList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Sorts elements in the list in-place according to natural sort order of the value returned by specified [selector] function.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic inline fun <T, R : Comparable<R>> MutableList<T>.sortBy(crossinline selector: (T) -> R?): Unit {\n    if (size > 1) sortWith(compareBy(selector))\n}\n\n/**\n * Sorts elements in the list in-place descending according to natural sort order of the value returned by specified [selector] function.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic inline fun <T, R : Comparable<R>> MutableList<T>.sortByDescending(crossinline selector: (T) -> R?): Unit {\n    if (size > 1) sortWith(compareByDescending(selector))\n}\n\n/**\n * Sorts elements in the list in-place descending according to their natural sort order.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic fun <T : Comparable<T>> MutableList<T>.sortDescending(): Unit {\n    sortWith(reverseOrder())\n}\n\n/**\n * Returns a list of all elements sorted according to their natural sort order.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic fun <T : Comparable<T>> Iterable<T>.sorted(): List<T> {\n    if (this is Collection) {\n        if (size <= 1) return this.toList()\n        @Suppress(\"UNCHECKED_CAST\")\n        return (toTypedArray<Comparable<T>>() as Array<T>).apply { sort() }.asList()\n    }\n    return toMutableList().apply { sort() }\n}\n\n/**\n * Returns a list of all elements sorted according to natural sort order of the value returned by specified [selector] function.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic inline fun <T, R : Comparable<R>> Iterable<T>.sortedBy(crossinline selector: (T) -> R?): List<T> {\n    return sortedWith(compareBy(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to natural sort order of the value returned by specified [selector] function.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic inline fun <T, R : Comparable<R>> Iterable<T>.sortedByDescending(crossinline selector: (T) -> R?): List<T> {\n    return sortedWith(compareByDescending(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to their natural sort order.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic fun <T : Comparable<T>> Iterable<T>.sortedDescending(): List<T> {\n    return sortedWith(reverseOrder())\n}\n\n/**\n * Returns a list of all elements sorted according to the specified [comparator].\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic fun <T> Iterable<T>.sortedWith(comparator: Comparator<in T>): List<T> {\n    if (this is Collection) {\n       if (size <= 1) return this.toList()\n       @Suppress(\"UNCHECKED_CAST\")\n       return (toTypedArray<Any?>() as Array<T>).apply { sortWith(comparator) }.asList()\n    }\n    return toMutableList().apply { sortWith(comparator) }\n}\n\n/**\n * Returns an array of Boolean containing all of the elements of this collection.\n */\npublic fun Collection<Boolean>.toBooleanArray(): BooleanArray {\n    val result = BooleanArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns an array of Byte containing all of the elements of this collection.\n */\npublic fun Collection<Byte>.toByteArray(): ByteArray {\n    val result = ByteArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns an array of Char containing all of the elements of this collection.\n */\npublic fun Collection<Char>.toCharArray(): CharArray {\n    val result = CharArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns an array of Double containing all of the elements of this collection.\n */\npublic fun Collection<Double>.toDoubleArray(): DoubleArray {\n    val result = DoubleArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns an array of Float containing all of the elements of this collection.\n */\npublic fun Collection<Float>.toFloatArray(): FloatArray {\n    val result = FloatArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns an array of Int containing all of the elements of this collection.\n */\npublic fun Collection<Int>.toIntArray(): IntArray {\n    val result = IntArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns an array of Long containing all of the elements of this collection.\n */\npublic fun Collection<Long>.toLongArray(): LongArray {\n    val result = LongArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns an array of Short containing all of the elements of this collection.\n */\npublic fun Collection<Short>.toShortArray(): ShortArray {\n    val result = ShortArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to elements of the given collection.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original collection.\n * \n * @sample samples.collections.Collections.Transformations.associate\n */\npublic inline fun <T, K, V> Iterable<T>.associate(transform: (T) -> Pair<K, V>): Map<K, V> {\n    val capacity = mapCapacity(collectionSizeOrDefault(10)).coerceAtLeast(16)\n    return associateTo(LinkedHashMap<K, V>(capacity), transform)\n}\n\n/**\n * Returns a [Map] containing the elements from the given collection indexed by the key\n * returned from [keySelector] function applied to each element.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original collection.\n * \n * @sample samples.collections.Collections.Transformations.associateBy\n */\npublic inline fun <T, K> Iterable<T>.associateBy(keySelector: (T) -> K): Map<K, T> {\n    val capacity = mapCapacity(collectionSizeOrDefault(10)).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, T>(capacity), keySelector)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given collection.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original collection.\n * \n * @sample samples.collections.Collections.Transformations.associateByWithValueTransform\n */\npublic inline fun <T, K, V> Iterable<T>.associateBy(keySelector: (T) -> K, valueTransform: (T) -> V): Map<K, V> {\n    val capacity = mapCapacity(collectionSizeOrDefault(10)).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, V>(capacity), keySelector, valueTransform)\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each element of the given collection\n * and value is the element itself.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Collections.Transformations.associateByTo\n */\npublic inline fun <T, K, M : MutableMap<in K, in T>> Iterable<T>.associateByTo(destination: M, keySelector: (T) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to elements of the given collection.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Collections.Transformations.associateByToWithValueTransform\n */\npublic inline fun <T, K, V, M : MutableMap<in K, in V>> Iterable<T>.associateByTo(destination: M, keySelector: (T) -> K, valueTransform: (T) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each element of the given collection.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * @sample samples.collections.Collections.Transformations.associateTo\n */\npublic inline fun <T, K, V, M : MutableMap<in K, in V>> Iterable<T>.associateTo(destination: M, transform: (T) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Returns a [Map] where keys are elements from the given collection and values are\n * produced by the [valueSelector] function applied to each element.\n * \n * If any two elements are equal, the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original collection.\n * \n * @sample samples.collections.Collections.Transformations.associateWith\n */\n@SinceKotlin(\"1.3\")\npublic inline fun <K, V> Iterable<K>.associateWith(valueSelector: (K) -> V): Map<K, V> {\n    val result = LinkedHashMap<K, V>(mapCapacity(collectionSizeOrDefault(10)).coerceAtLeast(16))\n    return associateWithTo(result, valueSelector)\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs for each element of the given collection,\n * where key is the element itself and value is provided by the [valueSelector] function applied to that key.\n * \n * If any two elements are equal, the last one overwrites the former value in the map.\n * \n * @sample samples.collections.Collections.Transformations.associateWithTo\n */\n@SinceKotlin(\"1.3\")\npublic inline fun <K, V, M : MutableMap<in K, in V>> Iterable<K>.associateWithTo(destination: M, valueSelector: (K) -> V): M {\n    for (element in this) {\n        destination.put(element, valueSelector(element))\n    }\n    return destination\n}\n\n/**\n * Appends all elements to the given [destination] collection.\n */\npublic fun <T, C : MutableCollection<in T>> Iterable<T>.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Returns a [HashSet] of all elements.\n */\npublic fun <T> Iterable<T>.toHashSet(): HashSet<T> {\n    return toCollection(HashSet<T>(mapCapacity(collectionSizeOrDefault(12))))\n}\n\n/**\n * Returns a [List] containing all elements.\n */\npublic fun <T> Iterable<T>.toList(): List<T> {\n    if (this is Collection) {\n        return when (size) {\n            0 -> emptyList()\n            1 -> listOf(if (this is List) get(0) else iterator().next())\n            else -> this.toMutableList()\n        }\n    }\n    return this.toMutableList().optimizeReadOnlyList()\n}\n\n/**\n * Returns a [MutableList] filled with all elements of this collection.\n */\npublic fun <T> Iterable<T>.toMutableList(): MutableList<T> {\n    if (this is Collection<T>)\n        return this.toMutableList()\n    return toCollection(ArrayList<T>())\n}\n\n/**\n * Returns a [MutableList] filled with all elements of this collection.\n */\npublic fun <T> Collection<T>.toMutableList(): MutableList<T> {\n    return ArrayList(this)\n}\n\n/**\n * Returns a [Set] of all elements.\n * \n * The returned set preserves the element iteration order of the original collection.\n */\npublic fun <T> Iterable<T>.toSet(): Set<T> {\n    if (this is Collection) {\n        return when (size) {\n            0 -> emptySet()\n            1 -> setOf(if (this is List) this[0] else iterator().next())\n            else -> toCollection(LinkedHashSet<T>(mapCapacity(size)))\n        }\n    }\n    return toCollection(LinkedHashSet<T>()).optimizeReadOnlySet()\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original collection.\n * \n * @sample samples.collections.Collections.Transformations.flatMap\n */\npublic inline fun <T, R> Iterable<T>.flatMap(transform: (T) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original collection, to the given [destination].\n */\npublic inline fun <T, R, C : MutableCollection<in R>> Iterable<T>.flatMapTo(destination: C, transform: (T) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original collection by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original collection.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <T, K> Iterable<T>.groupBy(keySelector: (T) -> K): Map<K, List<T>> {\n    return groupByTo(LinkedHashMap<K, MutableList<T>>(), keySelector)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original collection\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original collection.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <T, K, V> Iterable<T>.groupBy(keySelector: (T) -> K, valueTransform: (T) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups elements of the original collection by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <T, K, M : MutableMap<in K, MutableList<T>>> Iterable<T>.groupByTo(destination: M, keySelector: (T) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<T>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original collection\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <T, K, V, M : MutableMap<in K, MutableList<V>>> Iterable<T>.groupByTo(destination: M, keySelector: (T) -> K, valueTransform: (T) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Creates a [Grouping] source from a collection to be used later with one of group-and-fold operations\n * using the specified [keySelector] function to extract a key from each element.\n * \n * @sample samples.collections.Grouping.groupingByEachCount\n */\n@SinceKotlin(\"1.1\")\npublic inline fun <T, K> Iterable<T>.groupingBy(crossinline keySelector: (T) -> K): Grouping<T, K> {\n    return object : Grouping<T, K> {\n        override fun sourceIterator(): Iterator<T> = this@groupingBy.iterator()\n        override fun keyOf(element: T): K = keySelector(element)\n    }\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original collection.\n * \n * @sample samples.collections.Collections.Transformations.map\n */\npublic inline fun <T, R> Iterable<T>.map(transform: (T) -> R): List<R> {\n    return mapTo(ArrayList<R>(collectionSizeOrDefault(10)), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original collection.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <T, R> Iterable<T>.mapIndexed(transform: (index: Int, T) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(collectionSizeOrDefault(10)), transform)\n}\n\n/**\n * Returns a list containing only the non-null results of applying the given [transform] function\n * to each element and its index in the original collection.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <T, R : Any> Iterable<T>.mapIndexedNotNull(transform: (index: Int, T) -> R?): List<R> {\n    return mapIndexedNotNullTo(ArrayList<R>(), transform)\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original collection\n * and appends only the non-null results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <T, R : Any, C : MutableCollection<in R>> Iterable<T>.mapIndexedNotNullTo(destination: C, transform: (index: Int, T) -> R?): C {\n    forEachIndexed { index, element -> transform(index, element)?.let { destination.add(it) } }\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original collection\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <T, R, C : MutableCollection<in R>> Iterable<T>.mapIndexedTo(destination: C, transform: (index: Int, T) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(checkIndexOverflow(index++), item))\n    return destination\n}\n\n/**\n * Returns a list containing only the non-null results of applying the given [transform] function\n * to each element in the original collection.\n */\npublic inline fun <T, R : Any> Iterable<T>.mapNotNull(transform: (T) -> R?): List<R> {\n    return mapNotNullTo(ArrayList<R>(), transform)\n}\n\n/**\n * Applies the given [transform] function to each element in the original collection\n * and appends only the non-null results to the given [destination].\n */\npublic inline fun <T, R : Any, C : MutableCollection<in R>> Iterable<T>.mapNotNullTo(destination: C, transform: (T) -> R?): C {\n    forEach { element -> transform(element)?.let { destination.add(it) } }\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original collection\n * and appends the results to the given [destination].\n */\npublic inline fun <T, R, C : MutableCollection<in R>> Iterable<T>.mapTo(destination: C, transform: (T) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Returns a lazy [Iterable] that wraps each element of the original collection\n * into an [IndexedValue] containing the index of that element and the element itself.\n */\npublic fun <T> Iterable<T>.withIndex(): Iterable<IndexedValue<T>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns a list containing only distinct elements from the given collection.\n * \n * The elements in the resulting list are in the same order as they were in the source collection.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic fun <T> Iterable<T>.distinct(): List<T> {\n    return this.toMutableSet().toList()\n}\n\n/**\n * Returns a list containing only elements from the given collection\n * having distinct keys returned by the given [selector] function.\n * \n * The elements in the resulting list are in the same order as they were in the source collection.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic inline fun <T, K> Iterable<T>.distinctBy(selector: (T) -> K): List<T> {\n    val set = HashSet<K>()\n    val list = ArrayList<T>()\n    for (e in this) {\n        val key = selector(e)\n        if (set.add(key))\n            list.add(e)\n    }\n    return list\n}\n\n/**\n * Returns a set containing all elements that are contained by both this collection and the specified collection.\n * \n * The returned set preserves the element iteration order of the original collection.\n * \n * To get a set containing all elements that are contained at least in one of these collections use [union].\n */\npublic infix fun <T> Iterable<T>.intersect(other: Iterable<T>): Set<T> {\n    val set = this.toMutableSet()\n    set.retainAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by this collection and not contained by the specified collection.\n * \n * The returned set preserves the element iteration order of the original collection.\n */\npublic infix fun <T> Iterable<T>.subtract(other: Iterable<T>): Set<T> {\n    val set = this.toMutableSet()\n    set.removeAll(other)\n    return set\n}\n\n/**\n * Returns a mutable set containing all distinct elements from the given collection.\n * \n * The returned set preserves the element iteration order of the original collection.\n */\npublic fun <T> Iterable<T>.toMutableSet(): MutableSet<T> {\n    return when (this) {\n        is Collection<T> -> LinkedHashSet(this)\n        else -> toCollection(LinkedHashSet<T>())\n    }\n}\n\n/**\n * Returns a set containing all distinct elements from both collections.\n * \n * The returned set preserves the element iteration order of the original collection.\n * Those elements of the [other] collection that are unique are iterated in the end\n * in the order of the [other] collection.\n * \n * To get a set containing all elements that are contained in both collections use [intersect].\n */\npublic infix fun <T> Iterable<T>.union(other: Iterable<T>): Set<T> {\n    val set = this.toMutableSet()\n    set.addAll(other)\n    return set\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.all\n */\npublic inline fun <T> Iterable<T>.all(predicate: (T) -> Boolean): Boolean {\n    if (this is Collection && isEmpty()) return true\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if collection has at least one element.\n * \n * @sample samples.collections.Collections.Aggregates.any\n */\npublic fun <T> Iterable<T>.any(): Boolean {\n    if (this is Collection) return !isEmpty()\n    return iterator().hasNext()\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.anyWithPredicate\n */\npublic inline fun <T> Iterable<T>.any(predicate: (T) -> Boolean): Boolean {\n    if (this is Collection && isEmpty()) return false\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns the number of elements in this collection.\n */\npublic fun <T> Iterable<T>.count(): Int {\n    if (this is Collection) return size\n    var count = 0\n    for (element in this) checkCountOverflow(++count)\n    return count\n}\n\n/**\n * Returns the number of elements in this collection.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Collection<T>.count(): Int {\n    return size\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\npublic inline fun <T> Iterable<T>.count(predicate: (T) -> Boolean): Int {\n    if (this is Collection && isEmpty()) return 0\n    var count = 0\n    for (element in this) if (predicate(element)) checkCountOverflow(++count)\n    return count\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun <T, R> Iterable<T>.fold(initial: R, operation: (acc: R, T) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original collection.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\npublic inline fun <T, R> Iterable<T>.foldIndexed(initial: R, operation: (index: Int, acc: R, T) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(checkIndexOverflow(index++), accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun <T, R> List<T>.foldRight(initial: R, operation: (T, acc: R) -> R): R {\n    var accumulator = initial\n    if (!isEmpty()) {\n        val iterator = listIterator(size)\n        while (iterator.hasPrevious()) {\n            accumulator = operation(iterator.previous(), accumulator)\n        }\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original list and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <T, R> List<T>.foldRightIndexed(initial: R, operation: (index: Int, T, acc: R) -> R): R {\n    var accumulator = initial\n    if (!isEmpty()) {\n        val iterator = listIterator(size)\n        while (iterator.hasPrevious()) {\n            val index = iterator.previousIndex()\n            accumulator = operation(index, iterator.previous(), accumulator)\n        }\n    }\n    return accumulator\n}\n\n/**\n * Performs the given [action] on each element.\n */\n@kotlin.internal.HidesMembers\npublic inline fun <T> Iterable<T>.forEach(action: (T) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the desired action on the element.\n */\npublic inline fun <T> Iterable<T>.forEachIndexed(action: (index: Int, T) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(checkIndexOverflow(index++), item)\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\n@SinceKotlin(\"1.1\")\npublic fun Iterable<Double>.max(): Double? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var max = iterator.next()\n    if (max.isNaN()) return max\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (e.isNaN()) return e\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\n@SinceKotlin(\"1.1\")\npublic fun Iterable<Float>.max(): Float? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var max = iterator.next()\n    if (max.isNaN()) return max\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (e.isNaN()) return e\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n */\npublic fun <T : Comparable<T>> Iterable<T>.max(): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var max = iterator.next()\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.maxBy\n */\npublic inline fun <T, R : Comparable<R>> Iterable<T>.maxBy(selector: (T) -> R): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var maxElem = iterator.next()\n    if (!iterator.hasNext()) return maxElem\n    var maxValue = selector(maxElem)\n    do {\n        val e = iterator.next()\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    } while (iterator.hasNext())\n    return maxElem\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun <T> Iterable<T>.maxWith(comparator: Comparator<in T>): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var max = iterator.next()\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\n@SinceKotlin(\"1.1\")\npublic fun Iterable<Double>.min(): Double? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var min = iterator.next()\n    if (min.isNaN()) return min\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (e.isNaN()) return e\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\n@SinceKotlin(\"1.1\")\npublic fun Iterable<Float>.min(): Float? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var min = iterator.next()\n    if (min.isNaN()) return min\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (e.isNaN()) return e\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n */\npublic fun <T : Comparable<T>> Iterable<T>.min(): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var min = iterator.next()\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.minBy\n */\npublic inline fun <T, R : Comparable<R>> Iterable<T>.minBy(selector: (T) -> R): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var minElem = iterator.next()\n    if (!iterator.hasNext()) return minElem\n    var minValue = selector(minElem)\n    do {\n        val e = iterator.next()\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    } while (iterator.hasNext())\n    return minElem\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun <T> Iterable<T>.minWith(comparator: Comparator<in T>): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var min = iterator.next()\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns `true` if the collection has no elements.\n * \n * @sample samples.collections.Collections.Aggregates.none\n */\npublic fun <T> Iterable<T>.none(): Boolean {\n    if (this is Collection) return isEmpty()\n    return !iterator().hasNext()\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.noneWithPredicate\n */\npublic inline fun <T> Iterable<T>.none(predicate: (T) -> Boolean): Boolean {\n    if (this is Collection && isEmpty()) return true\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Performs the given [action] on each element and returns the collection itself afterwards.\n */\n@SinceKotlin(\"1.1\")\npublic inline fun <T, C : Iterable<T>> C.onEach(action: (T) -> Unit): C {\n    return apply { for (element in this) action(element) }\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun <S, T : S> Iterable<T>.reduce(operation: (acc: S, T) -> S): S {\n    val iterator = this.iterator()\n    if (!iterator.hasNext()) throw UnsupportedOperationException(\"Empty collection can't be reduced.\")\n    var accumulator: S = iterator.next()\n    while (iterator.hasNext()) {\n        accumulator = operation(accumulator, iterator.next())\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original collection.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun <S, T : S> Iterable<T>.reduceIndexed(operation: (index: Int, acc: S, T) -> S): S {\n    val iterator = this.iterator()\n    if (!iterator.hasNext()) throw UnsupportedOperationException(\"Empty collection can't be reduced.\")\n    var index = 1\n    var accumulator: S = iterator.next()\n    while (iterator.hasNext()) {\n        accumulator = operation(checkIndexOverflow(index++), accumulator, iterator.next())\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element. Returns null if the collection is empty.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic inline fun <S, T : S> Iterable<T>.reduceOrNull(operation: (acc: S, T) -> S): S? {\n    val iterator = this.iterator()\n    if (!iterator.hasNext()) return null\n    var accumulator: S = iterator.next()\n    while (iterator.hasNext()) {\n        accumulator = operation(accumulator, iterator.next())\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun <S, T : S> List<T>.reduceRight(operation: (T, acc: S) -> S): S {\n    val iterator = listIterator(size)\n    if (!iterator.hasPrevious())\n        throw UnsupportedOperationException(\"Empty list can't be reduced.\")\n    var accumulator: S = iterator.previous()\n    while (iterator.hasPrevious()) {\n        accumulator = operation(iterator.previous(), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left\n * to each element with its index in the original list and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun <S, T : S> List<T>.reduceRightIndexed(operation: (index: Int, T, acc: S) -> S): S {\n    val iterator = listIterator(size)\n    if (!iterator.hasPrevious())\n        throw UnsupportedOperationException(\"Empty list can't be reduced.\")\n    var accumulator: S = iterator.previous()\n    while (iterator.hasPrevious()) {\n        val index = iterator.previousIndex()\n        accumulator = operation(index, iterator.previous(), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value. Returns null if the list is empty.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRightOrNull\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic inline fun <S, T : S> List<T>.reduceRightOrNull(operation: (T, acc: S) -> S): S? {\n    val iterator = listIterator(size)\n    if (!iterator.hasPrevious())\n        return null\n    var accumulator: S = iterator.previous()\n    while (iterator.hasPrevious()) {\n        accumulator = operation(iterator.previous(), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic inline fun <T, R> Iterable<T>.scan(initial: R, operation: (acc: R, T) -> R): List<R> {\n    val estimatedSize = collectionSizeOrDefault(9)\n    if (estimatedSize == 0) return listOf(initial)\n    val result = ArrayList<R>(estimatedSize + 1).apply { add(initial) }\n    var accumulator = initial\n    for (element in this) {\n        accumulator = operation(accumulator, element)\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original collection and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic inline fun <T, R> Iterable<T>.scanIndexed(initial: R, operation: (index: Int, acc: R, T) -> R): List<R> {\n    val estimatedSize = collectionSizeOrDefault(9)\n    if (estimatedSize == 0) return listOf(initial)\n    val result = ArrayList<R>(estimatedSize + 1).apply { add(initial) }\n    var index = 0\n    var accumulator = initial\n    for (element in this) {\n        accumulator = operation(index++, accumulator, element)\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with the first element of this collection.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and the element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scanReduce\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic inline fun <S, T : S> Iterable<T>.scanReduce(operation: (acc: S, T) -> S): List<S> {\n    val iterator = this.iterator()\n    if (!iterator.hasNext()) return emptyList()\n    var accumulator: S = iterator.next()\n    val result = ArrayList<S>(collectionSizeOrDefault(10)).apply { add(accumulator) }\n    while (iterator.hasNext()) {\n        accumulator = operation(accumulator, iterator.next())\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original collection and current accumulator value that starts with the first element of this collection.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scanReduce\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic inline fun <S, T : S> Iterable<T>.scanReduceIndexed(operation: (index: Int, acc: S, T) -> S): List<S> {\n    val iterator = this.iterator()\n    if (!iterator.hasNext()) return emptyList()\n    var accumulator: S = iterator.next()\n    val result = ArrayList<S>(collectionSizeOrDefault(10)).apply { add(accumulator) }\n    var index = 1\n    while (iterator.hasNext()) {\n        accumulator = operation(index++, accumulator, iterator.next())\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the collection.\n */\npublic inline fun <T> Iterable<T>.sumBy(selector: (T) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the collection.\n */\npublic inline fun <T> Iterable<T>.sumByDouble(selector: (T) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns an original collection containing all the non-`null` elements, throwing an [IllegalArgumentException] if there are any `null` elements.\n */\npublic fun <T : Any> Iterable<T?>.requireNoNulls(): Iterable<T> {\n    for (element in this) {\n        if (element == null) {\n            throw IllegalArgumentException(\"null element found in $this.\")\n        }\n    }\n    @Suppress(\"UNCHECKED_CAST\")\n    return this as Iterable<T>\n}\n\n/**\n * Returns an original collection containing all the non-`null` elements, throwing an [IllegalArgumentException] if there are any `null` elements.\n */\npublic fun <T : Any> List<T?>.requireNoNulls(): List<T> {\n    for (element in this) {\n        if (element == null) {\n            throw IllegalArgumentException(\"null element found in $this.\")\n        }\n    }\n    @Suppress(\"UNCHECKED_CAST\")\n    return this as List<T>\n}\n\n/**\n * Splits this collection into a list of lists each not exceeding the given [size].\n * \n * The last list in the resulting list may have less elements than the given [size].\n * \n * @param size the number of elements to take in each list, must be positive and can be greater than the number of elements in this collection.\n * \n * @sample samples.collections.Collections.Transformations.chunked\n */\n@SinceKotlin(\"1.2\")\npublic fun <T> Iterable<T>.chunked(size: Int): List<List<T>> {\n    return windowed(size, size, partialWindows = true)\n}\n\n/**\n * Splits this collection into several lists each not exceeding the given [size]\n * and applies the given [transform] function to an each.\n * \n * @return list of results of the [transform] applied to an each list.\n * \n * Note that the list passed to the [transform] function is ephemeral and is valid only inside that function.\n * You should not store it or allow it to escape in some way, unless you made a snapshot of it.\n * The last list may have less elements than the given [size].\n * \n * @param size the number of elements to take in each list, must be positive and can be greater than the number of elements in this collection.\n * \n * @sample samples.text.Strings.chunkedTransform\n */\n@SinceKotlin(\"1.2\")\npublic fun <T, R> Iterable<T>.chunked(size: Int, transform: (List<T>) -> R): List<R> {\n    return windowed(size, size, partialWindows = true, transform = transform)\n}\n\n/**\n * Returns a list containing all elements of the original collection without the first occurrence of the given [element].\n */\npublic operator fun <T> Iterable<T>.minus(element: T): List<T> {\n    val result = ArrayList<T>(collectionSizeOrDefault(10))\n    var removed = false\n    return this.filterTo(result) { if (!removed && it == element) { removed = true; false } else true }\n}\n\n/**\n * Returns a list containing all elements of the original collection except the elements contained in the given [elements] array.\n * \n * The [elements] array may be converted to a [HashSet] to speed up the operation, thus the elements are required to have\n * a correct and stable implementation of `hashCode()` that doesn't change between successive invocations.\n */\npublic operator fun <T> Iterable<T>.minus(elements: Array<out T>): List<T> {\n    if (elements.isEmpty()) return this.toList()\n    val other = elements.toHashSet()\n    return this.filterNot { it in other }\n}\n\n/**\n * Returns a list containing all elements of the original collection except the elements contained in the given [elements] collection.\n * \n * The [elements] collection may be converted to a [HashSet] to speed up the operation, thus the elements are required to have\n * a correct and stable implementation of `hashCode()` that doesn't change between successive invocations.\n */\npublic operator fun <T> Iterable<T>.minus(elements: Iterable<T>): List<T> {\n    val other = elements.convertToSetForSetOperationWith(this)\n    if (other.isEmpty())\n        return this.toList()\n    return this.filterNot { it in other }\n}\n\n/**\n * Returns a list containing all elements of the original collection except the elements contained in the given [elements] sequence.\n * \n * The [elements] sequence may be converted to a [HashSet] to speed up the operation, thus the elements are required to have\n * a correct and stable implementation of `hashCode()` that doesn't change between successive invocations.\n */\npublic operator fun <T> Iterable<T>.minus(elements: Sequence<T>): List<T> {\n    val other = elements.toHashSet()\n    if (other.isEmpty())\n        return this.toList()\n    return this.filterNot { it in other }\n}\n\n/**\n * Returns a list containing all elements of the original collection without the first occurrence of the given [element].\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.minusElement(element: T): List<T> {\n    return minus(element)\n}\n\n/**\n * Splits the original collection into pair of lists,\n * where *first* list contains elements for which [predicate] yielded `true`,\n * while *second* list contains elements for which [predicate] yielded `false`.\n * \n * @sample samples.collections.Iterables.Operations.partition\n */\npublic inline fun <T> Iterable<T>.partition(predicate: (T) -> Boolean): Pair<List<T>, List<T>> {\n    val first = ArrayList<T>()\n    val second = ArrayList<T>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Returns a list containing all elements of the original collection and then the given [element].\n */\npublic operator fun <T> Iterable<T>.plus(element: T): List<T> {\n    if (this is Collection) return this.plus(element)\n    val result = ArrayList<T>()\n    result.addAll(this)\n    result.add(element)\n    return result\n}\n\n/**\n * Returns a list containing all elements of the original collection and then the given [element].\n */\npublic operator fun <T> Collection<T>.plus(element: T): List<T> {\n    val result = ArrayList<T>(size + 1)\n    result.addAll(this)\n    result.add(element)\n    return result\n}\n\n/**\n * Returns a list containing all elements of the original collection and then all elements of the given [elements] array.\n */\npublic operator fun <T> Iterable<T>.plus(elements: Array<out T>): List<T> {\n    if (this is Collection) return this.plus(elements)\n    val result = ArrayList<T>()\n    result.addAll(this)\n    result.addAll(elements)\n    return result\n}\n\n/**\n * Returns a list containing all elements of the original collection and then all elements of the given [elements] array.\n */\npublic operator fun <T> Collection<T>.plus(elements: Array<out T>): List<T> {\n    val result = ArrayList<T>(this.size + elements.size)\n    result.addAll(this)\n    result.addAll(elements)\n    return result\n}\n\n/**\n * Returns a list containing all elements of the original collection and then all elements of the given [elements] collection.\n */\npublic operator fun <T> Iterable<T>.plus(elements: Iterable<T>): List<T> {\n    if (this is Collection) return this.plus(elements)\n    val result = ArrayList<T>()\n    result.addAll(this)\n    result.addAll(elements)\n    return result\n}\n\n/**\n * Returns a list containing all elements of the original collection and then all elements of the given [elements] collection.\n */\npublic operator fun <T> Collection<T>.plus(elements: Iterable<T>): List<T> {\n    if (elements is Collection) {\n        val result = ArrayList<T>(this.size + elements.size)\n        result.addAll(this)\n        result.addAll(elements)\n        return result\n    } else {\n        val result = ArrayList<T>(this)\n        result.addAll(elements)\n        return result\n    }\n}\n\n/**\n * Returns a list containing all elements of the original collection and then all elements of the given [elements] sequence.\n */\npublic operator fun <T> Iterable<T>.plus(elements: Sequence<T>): List<T> {\n    val result = ArrayList<T>()\n    result.addAll(this)\n    result.addAll(elements)\n    return result\n}\n\n/**\n * Returns a list containing all elements of the original collection and then all elements of the given [elements] sequence.\n */\npublic operator fun <T> Collection<T>.plus(elements: Sequence<T>): List<T> {\n    val result = ArrayList<T>(this.size + 10)\n    result.addAll(this)\n    result.addAll(elements)\n    return result\n}\n\n/**\n * Returns a list containing all elements of the original collection and then the given [element].\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.plusElement(element: T): List<T> {\n    return plus(element)\n}\n\n/**\n * Returns a list containing all elements of the original collection and then the given [element].\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Collection<T>.plusElement(element: T): List<T> {\n    return plus(element)\n}\n\n/**\n * Returns a list of snapshots of the window of the given [size]\n * sliding along this collection with the given [step], where each\n * snapshot is a list.\n * \n * Several last lists may have less elements than the given [size].\n * \n * Both [size] and [step] must be positive and can be greater than the number of elements in this collection.\n * @param size the number of elements to take in each window\n * @param step the number of elements to move the window forward by on an each step, by default 1\n * @param partialWindows controls whether or not to keep partial windows in the end if any,\n * by default `false` which means partial windows won't be preserved\n * \n * @sample samples.collections.Sequences.Transformations.takeWindows\n */\n@SinceKotlin(\"1.2\")\npublic fun <T> Iterable<T>.windowed(size: Int, step: Int = 1, partialWindows: Boolean = false): List<List<T>> {\n    checkWindowSizeStep(size, step)\n    if (this is RandomAccess && this is List) {\n        val thisSize = this.size\n        val resultCapacity = thisSize / step + if (thisSize % step == 0) 0 else 1\n        val result = ArrayList<List<T>>(resultCapacity)\n        var index = 0\n        while (index in 0 until thisSize) {\n            val windowSize = size.coerceAtMost(thisSize - index)\n            if (windowSize < size && !partialWindows) break\n            result.add(List(windowSize) { this[it + index] })\n            index += step\n        }\n        return result\n    }\n    val result = ArrayList<List<T>>()\n    windowedIterator(iterator(), size, step, partialWindows, reuseBuffer = false).forEach {\n        result.add(it)\n    }\n    return result\n}\n\n/**\n * Returns a list of results of applying the given [transform] function to\n * an each list representing a view over the window of the given [size]\n * sliding along this collection with the given [step].\n * \n * Note that the list passed to the [transform] function is ephemeral and is valid only inside that function.\n * You should not store it or allow it to escape in some way, unless you made a snapshot of it.\n * Several last lists may have less elements than the given [size].\n * \n * Both [size] and [step] must be positive and can be greater than the number of elements in this collection.\n * @param size the number of elements to take in each window\n * @param step the number of elements to move the window forward by on an each step, by default 1\n * @param partialWindows controls whether or not to keep partial windows in the end if any,\n * by default `false` which means partial windows won't be preserved\n * \n * @sample samples.collections.Sequences.Transformations.averageWindows\n */\n@SinceKotlin(\"1.2\")\npublic fun <T, R> Iterable<T>.windowed(size: Int, step: Int = 1, partialWindows: Boolean = false, transform: (List<T>) -> R): List<R> {\n    checkWindowSizeStep(size, step)\n    if (this is RandomAccess && this is List) {\n        val thisSize = this.size\n        val resultCapacity = thisSize / step + if (thisSize % step == 0) 0 else 1\n        val result = ArrayList<R>(resultCapacity)\n        val window = MovingSubList(this)\n        var index = 0\n        while (index in 0 until thisSize) {\n            val windowSize = size.coerceAtMost(thisSize - index)\n            if (!partialWindows && windowSize < size) break\n            window.move(index, index + windowSize)\n            result.add(transform(window))\n            index += step\n        }\n        return result\n    }\n    val result = ArrayList<R>()\n    windowedIterator(iterator(), size, step, partialWindows, reuseBuffer = true).forEach {\n        result.add(transform(it))\n    }\n    return result\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` collection and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <T, R> Iterable<T>.zip(other: Array<out R>): List<Pair<T, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of values built from the elements of `this` collection and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <T, R, V> Iterable<T>.zip(other: Array<out R>, transform: (a: T, b: R) -> V): List<V> {\n    val arraySize = other.size\n    val list = ArrayList<V>(minOf(collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in this) {\n        if (i >= arraySize) break\n        list.add(transform(element, other[i++]))\n    }\n    return list\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` collection and [other] collection with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <T, R> Iterable<T>.zip(other: Iterable<R>): List<Pair<T, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of values built from the elements of `this` collection and the [other] collection with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <T, R, V> Iterable<T>.zip(other: Iterable<R>, transform: (a: T, b: R) -> V): List<V> {\n    val first = iterator()\n    val second = other.iterator()\n    val list = ArrayList<V>(minOf(collectionSizeOrDefault(10), other.collectionSizeOrDefault(10)))\n    while (first.hasNext() && second.hasNext()) {\n        list.add(transform(first.next(), second.next()))\n    }\n    return list\n}\n\n/**\n * Returns a list of pairs of each two adjacent elements in this collection.\n * \n * The returned list is empty if this collection contains less than two elements.\n * \n * @sample samples.collections.Collections.Transformations.zipWithNext\n */\n@SinceKotlin(\"1.2\")\npublic fun <T> Iterable<T>.zipWithNext(): List<Pair<T, T>> {\n    return zipWithNext { a, b -> a to b }\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to an each pair of two adjacent elements in this collection.\n * \n * The returned list is empty if this collection contains less than two elements.\n * \n * @sample samples.collections.Collections.Transformations.zipWithNextToFindDeltas\n */\n@SinceKotlin(\"1.2\")\npublic inline fun <T, R> Iterable<T>.zipWithNext(transform: (a: T, b: T) -> R): List<R> {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return emptyList()\n    val result = mutableListOf<R>()\n    var current = iterator.next()\n    while (iterator.hasNext()) {\n        val next = iterator.next()\n        result.add(transform(current, next))\n        current = next\n    }\n    return result\n}\n\n/**\n * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinTo\n */\npublic fun <T, A : Appendable> Iterable<T>.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((T) -> CharSequence)? = null): A {\n    buffer.append(prefix)\n    var count = 0\n    for (element in this) {\n        if (++count > 1) buffer.append(separator)\n        if (limit < 0 || count <= limit) {\n            buffer.appendElement(element, transform)\n        } else break\n    }\n    if (limit >= 0 && count > limit) buffer.append(truncated)\n    buffer.append(postfix)\n    return buffer\n}\n\n/**\n * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinToString\n */\npublic fun <T> Iterable<T>.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((T) -> CharSequence)? = null): String {\n    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()\n}\n\n/**\n * Returns this collection as an [Iterable].\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.asIterable(): Iterable<T> {\n    return this\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original collection returning its elements when being iterated.\n * \n * @sample samples.collections.Sequences.Building.sequenceFromCollection\n */\npublic fun <T> Iterable<T>.asSequence(): Sequence<T> {\n    return Sequence { this.iterator() }\n}\n\n/**\n * Returns an average value of elements in the collection.\n */\n@kotlin.jvm.JvmName(\"averageOfByte\")\npublic fun Iterable<Byte>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        checkCountOverflow(++count)\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the collection.\n */\n@kotlin.jvm.JvmName(\"averageOfShort\")\npublic fun Iterable<Short>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        checkCountOverflow(++count)\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the collection.\n */\n@kotlin.jvm.JvmName(\"averageOfInt\")\npublic fun Iterable<Int>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        checkCountOverflow(++count)\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the collection.\n */\n@kotlin.jvm.JvmName(\"averageOfLong\")\npublic fun Iterable<Long>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        checkCountOverflow(++count)\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the collection.\n */\n@kotlin.jvm.JvmName(\"averageOfFloat\")\npublic fun Iterable<Float>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        checkCountOverflow(++count)\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the collection.\n */\n@kotlin.jvm.JvmName(\"averageOfDouble\")\npublic fun Iterable<Double>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        checkCountOverflow(++count)\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns the sum of all elements in the collection.\n */\n@kotlin.jvm.JvmName(\"sumOfByte\")\npublic fun Iterable<Byte>.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the collection.\n */\n@kotlin.jvm.JvmName(\"sumOfShort\")\npublic fun Iterable<Short>.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the collection.\n */\n@kotlin.jvm.JvmName(\"sumOfInt\")\npublic fun Iterable<Int>.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the collection.\n */\n@kotlin.jvm.JvmName(\"sumOfLong\")\npublic fun Iterable<Long>.sum(): Long {\n    var sum: Long = 0L\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the collection.\n */\n@kotlin.jvm.JvmName(\"sumOfFloat\")\npublic fun Iterable<Float>.sum(): Float {\n    var sum: Float = 0.0f\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the collection.\n */\n@kotlin.jvm.JvmName(\"sumOfDouble\")\npublic fun Iterable<Double>.sum(): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n@file:kotlin.jvm.JvmName(\"ComparisonsKt\")\n@file:kotlin.jvm.JvmMultifileClass\n\npackage kotlin.comparisons\n\n/**\n * Compares two values using the specified functions [selectors] to calculate the result of the comparison.\n * The functions are called sequentially, receive the given values [a] and [b] and return [Comparable]\n * objects. As soon as the [Comparable] instances returned by a function for [a] and [b] values do not\n * compare as equal, the result of that comparison is returned.\n *\n * @sample samples.comparisons.Comparisons.compareValuesByWithSelectors\n */\npublic fun <T> compareValuesBy(a: T, b: T, vararg selectors: (T) -> Comparable<*>?): Int {\n    require(selectors.size > 0)\n    return compareValuesByImpl(a, b, selectors)\n}\n\nprivate fun <T> compareValuesByImpl(a: T, b: T, selectors: Array<out (T) -> Comparable<*>?>): Int {\n    for (fn in selectors) {\n        val v1 = fn(a)\n        val v2 = fn(b)\n        val diff = compareValues(v1, v2)\n        if (diff != 0) return diff\n    }\n    return 0\n}\n\n/**\n * Compares two values using the specified [selector] function to calculate the result of the comparison.\n * The function is applied to the given values [a] and [b] and return [Comparable] objects.\n * The result of comparison of these [Comparable] instances is returned.\n *\n * @sample samples.comparisons.Comparisons.compareValuesByWithSingleSelector\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> compareValuesBy(a: T, b: T, selector: (T) -> Comparable<*>?): Int {\n    return compareValues(selector(a), selector(b))\n}\n\n/**\n * Compares two values using the specified [selector] function to calculate the result of the comparison.\n * The function is applied to the given values [a] and [b] and return objects of type K which are then being\n * compared with the given [comparator].\n *\n * @sample samples.comparisons.Comparisons.compareValuesByWithComparator\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T, K> compareValuesBy(a: T, b: T, comparator: Comparator<in K>, selector: (T) -> K): Int {\n    return comparator.compare(selector(a), selector(b))\n}\n\n//// Not so useful without type inference for receiver of expression\n//// compareValuesWith(v1, v2, compareBy { it.prop1 } thenByDescending { it.prop2 })\n///**\n// * Compares two values using the specified [comparator].\n// */\n//@Suppress(\"NOTHING_TO_INLINE\")\n//public inline fun <T> compareValuesWith(a: T, b: T, comparator: Comparator<T>): Int = comparator.compare(a, b)\n//\n\n\n/**\n * Compares two nullable [Comparable] values. Null is considered less than any value.\n *\n * @sample samples.comparisons.Comparisons.compareValues\n */\npublic fun <T : Comparable<*>> compareValues(a: T?, b: T?): Int {\n    if (a === b) return 0\n    if (a == null) return -1\n    if (b == null) return 1\n\n    @Suppress(\"UNCHECKED_CAST\")\n    return (a as Comparable<Any>).compareTo(b)\n}\n\n/**\n * Creates a comparator using the sequence of functions to calculate a result of comparison.\n * The functions are called sequentially, receive the given values `a` and `b` and return [Comparable]\n * objects. As soon as the [Comparable] instances returned by a function for `a` and `b` values do not\n * compare as equal, the result of that comparison is returned from the [Comparator].\n *\n * @sample samples.comparisons.Comparisons.compareByWithSelectors\n */\npublic fun <T> compareBy(vararg selectors: (T) -> Comparable<*>?): Comparator<T> {\n    require(selectors.size > 0)\n    return Comparator { a, b -> compareValuesByImpl(a, b, selectors) }\n}\n\n\n/**\n * Creates a comparator using the function to transform value to a [Comparable] instance for comparison.\n *\n * @sample samples.comparisons.Comparisons.compareByWithSingleSelector\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> compareBy(crossinline selector: (T) -> Comparable<*>?): Comparator<T> =\n    Comparator { a, b -> compareValuesBy(a, b, selector) }\n\n/**\n * Creates a comparator using the [selector] function to transform values being compared and then applying\n * the specified [comparator] to compare transformed values.\n *\n * @sample samples.comparisons.Comparisons.compareByWithComparator\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T, K> compareBy(comparator: Comparator<in K>, crossinline selector: (T) -> K): Comparator<T> =\n    Comparator { a, b -> compareValuesBy(a, b, comparator, selector) }\n\n/**\n * Creates a descending comparator using the function to transform value to a [Comparable] instance for comparison.\n *\n * @sample samples.comparisons.Comparisons.compareByDescendingWithSingleSelector\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> compareByDescending(crossinline selector: (T) -> Comparable<*>?): Comparator<T> =\n    Comparator { a, b -> compareValuesBy(b, a, selector) }\n\n/**\n * Creates a descending comparator using the [selector] function to transform values being compared and then applying\n * the specified [comparator] to compare transformed values.\n *\n * Note that an order of [comparator] is reversed by this wrapper.\n *\n * @sample samples.comparisons.Comparisons.compareByDescendingWithComparator\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T, K> compareByDescending(comparator: Comparator<in K>, crossinline selector: (T) -> K): Comparator<T> =\n    Comparator { a, b -> compareValuesBy(b, a, comparator, selector) }\n\n/**\n * Creates a comparator comparing values after the primary comparator defined them equal. It uses\n * the function to transform value to a [Comparable] instance for comparison.\n *\n * @sample samples.comparisons.Comparisons.thenBy\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Comparator<T>.thenBy(crossinline selector: (T) -> Comparable<*>?): Comparator<T> =\n    Comparator { a, b ->\n        val previousCompare = this@thenBy.compare(a, b)\n        if (previousCompare != 0) previousCompare else compareValuesBy(a, b, selector)\n    }\n\n/**\n * Creates a comparator comparing values after the primary comparator defined them equal. It uses\n * the [selector] function to transform values and then compares them with the given [comparator].\n *\n * @sample samples.comparisons.Comparisons.thenByWithComparator\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T, K> Comparator<T>.thenBy(comparator: Comparator<in K>, crossinline selector: (T) -> K): Comparator<T> =\n    Comparator { a, b ->\n        val previousCompare = this@thenBy.compare(a, b)\n        if (previousCompare != 0) previousCompare else compareValuesBy(a, b, comparator, selector)\n    }\n\n/**\n * Creates a descending comparator using the primary comparator and\n * the function to transform value to a [Comparable] instance for comparison.\n *\n * @sample samples.comparisons.Comparisons.thenByDescending\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Comparator<T>.thenByDescending(crossinline selector: (T) -> Comparable<*>?): Comparator<T> =\n    Comparator { a, b ->\n        val previousCompare = this@thenByDescending.compare(a, b)\n        if (previousCompare != 0) previousCompare else compareValuesBy(b, a, selector)\n    }\n\n/**\n * Creates a descending comparator comparing values after the primary comparator defined them equal. It uses\n * the [selector] function to transform values and then compares them with the given [comparator].\n *\n * @sample samples.comparisons.Comparisons.thenByDescendingWithComparator\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T, K> Comparator<T>.thenByDescending(comparator: Comparator<in K>, crossinline selector: (T) -> K): Comparator<T> =\n    Comparator { a, b ->\n        val previousCompare = this@thenByDescending.compare(a, b)\n        if (previousCompare != 0) previousCompare else compareValuesBy(b, a, comparator, selector)\n    }\n\n\n/**\n * Creates a comparator using the primary comparator and function to calculate a result of comparison.\n *\n * @sample samples.comparisons.Comparisons.thenComparator\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Comparator<T>.thenComparator(crossinline comparison: (a: T, b: T) -> Int): Comparator<T> =\n    Comparator { a, b ->\n        val previousCompare = this@thenComparator.compare(a, b)\n        if (previousCompare != 0) previousCompare else comparison(a, b)\n    }\n\n/**\n * Combines this comparator and the given [comparator] such that the latter is applied only\n * when the former considered values equal.\n *\n * @sample samples.comparisons.Comparisons.then\n */\npublic infix fun <T> Comparator<T>.then(comparator: Comparator<in T>): Comparator<T> =\n    Comparator { a, b ->\n        val previousCompare = this@then.compare(a, b)\n        if (previousCompare != 0) previousCompare else comparator.compare(a, b)\n    }\n\n/**\n * Combines this comparator and the given [comparator] such that the latter is applied only\n * when the former considered values equal.\n *\n * @sample samples.comparisons.Comparisons.thenDescending\n */\npublic infix fun <T> Comparator<T>.thenDescending(comparator: Comparator<in T>): Comparator<T> =\n    Comparator<T> { a, b ->\n        val previousCompare = this@thenDescending.compare(a, b)\n        if (previousCompare != 0) previousCompare else comparator.compare(b, a)\n    }\n\n// Not so useful without type inference for receiver of expression\n/**\n * Extends the given [comparator] of non-nullable values to a comparator of nullable values\n * considering `null` value less than any other value.\n *\n * @sample samples.comparisons.Comparisons.nullsFirstLastWithComparator\n */\npublic fun <T : Any> nullsFirst(comparator: Comparator<in T>): Comparator<T?> =\n    Comparator { a, b ->\n        when {\n            a === b -> 0\n            a == null -> -1\n            b == null -> 1\n            else -> comparator.compare(a, b)\n        }\n    }\n\n/**\n * Provides a comparator of nullable [Comparable] values\n * considering `null` value less than any other value.\n *\n * @sample samples.comparisons.Comparisons.nullsFirstLastComparator\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T : Comparable<T>> nullsFirst(): Comparator<T?> = nullsFirst(naturalOrder())\n\n/**\n * Extends the given [comparator] of non-nullable values to a comparator of nullable values\n * considering `null` value greater than any other value.\n *\n * @sample samples.comparisons.Comparisons.nullsFirstLastWithComparator\n */\npublic fun <T : Any> nullsLast(comparator: Comparator<in T>): Comparator<T?> =\n    Comparator { a, b ->\n        when {\n            a === b -> 0\n            a == null -> 1\n            b == null -> -1\n            else -> comparator.compare(a, b)\n        }\n    }\n\n/**\n * Provides a comparator of nullable [Comparable] values\n * considering `null` value greater than any other value.\n *\n * @sample samples.comparisons.Comparisons.nullsFirstLastComparator\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T : Comparable<T>> nullsLast(): Comparator<T?> = nullsLast(naturalOrder())\n\n/**\n * Returns a comparator that compares [Comparable] objects in natural order.\n *\n * @sample samples.comparisons.Comparisons.naturalOrderComparator\n */\npublic fun <T : Comparable<T>> naturalOrder(): Comparator<T> = @Suppress(\"UNCHECKED_CAST\") (NaturalOrderComparator as Comparator<T>)\n\n/**\n * Returns a comparator that compares [Comparable] objects in reversed natural order.\n *\n * @sample samples.comparisons.Comparisons.nullsFirstLastWithComparator\n */\npublic fun <T : Comparable<T>> reverseOrder(): Comparator<T> = @Suppress(\"UNCHECKED_CAST\") (ReverseOrderComparator as Comparator<T>)\n\n/**\n *  Returns a comparator that imposes the reverse ordering of this comparator.\n *\n *  @sample samples.comparisons.Comparisons.reversed\n */\npublic fun <T> Comparator<T>.reversed(): Comparator<T> = when (this) {\n    is ReversedComparator -> this.comparator\n    NaturalOrderComparator -> @Suppress(\"UNCHECKED_CAST\") (ReverseOrderComparator as Comparator<T>)\n    ReverseOrderComparator -> @Suppress(\"UNCHECKED_CAST\") (NaturalOrderComparator as Comparator<T>)\n    else -> ReversedComparator(this)\n}\n\n\nprivate class ReversedComparator<T>(public val comparator: Comparator<T>) : Comparator<T> {\n    override fun compare(a: T, b: T): Int = comparator.compare(b, a)\n    @Suppress(\"VIRTUAL_MEMBER_HIDDEN\")\n    fun reversed(): Comparator<T> = comparator\n}\n\nprivate object NaturalOrderComparator : Comparator<Comparable<Any>> {\n    override fun compare(a: Comparable<Any>, b: Comparable<Any>): Int = a.compareTo(b)\n    @Suppress(\"VIRTUAL_MEMBER_HIDDEN\")\n    fun reversed(): Comparator<Comparable<Any>> = ReverseOrderComparator\n}\n\nprivate object ReverseOrderComparator : Comparator<Comparable<Any>> {\n    override fun compare(a: Comparable<Any>, b: Comparable<Any>): Int = b.compareTo(a)\n    @Suppress(\"VIRTUAL_MEMBER_HIDDEN\")\n    fun reversed(): Comparator<Comparable<Any>> = NaturalOrderComparator\n}\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin\n\n\npublic actual interface Comparator<T> {\n    @JsName(\"compare\")\n    actual fun compare(a: T, b: T): Int\n}\n\npublic actual inline fun <T> Comparator(crossinline comparison: (a: T, b: T) -> Int): Comparator<T> = object : Comparator<T> {\n    override fun compare(a: T, b: T): Int = comparison(a, b)\n}\n",null,null,null,null,null,null,null,null,null,null,null,null,"/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"MapsKt\")\n@file:UseExperimental(kotlin.experimental.ExperimentalTypeInference::class)\n\npackage kotlin.collections\n\nimport kotlin.contracts.*\n\nprivate object EmptyMap : Map<Any?, Nothing>, Serializable {\n    private const val serialVersionUID: Long = 8246714829545688274\n\n    override fun equals(other: Any?): Boolean = other is Map<*, *> && other.isEmpty()\n    override fun hashCode(): Int = 0\n    override fun toString(): String = \"{}\"\n\n    override val size: Int get() = 0\n    override fun isEmpty(): Boolean = true\n\n    override fun containsKey(key: Any?): Boolean = false\n    override fun containsValue(value: Nothing): Boolean = false\n    override fun get(key: Any?): Nothing? = null\n    override val entries: Set<Map.Entry<Any?, Nothing>> get() = EmptySet\n    override val keys: Set<Any?> get() = EmptySet\n    override val values: Collection<Nothing> get() = EmptyList\n\n    private fun readResolve(): Any = EmptyMap\n}\n\n/**\n * Returns an empty read-only map of specified type.\n *\n * The returned map is serializable (JVM).\n * @sample samples.collections.Maps.Instantiation.emptyReadOnlyMap\n */\npublic fun <K, V> emptyMap(): Map<K, V> = @Suppress(\"UNCHECKED_CAST\") (EmptyMap as Map<K, V>)\n\n/**\n * Returns a new read-only map with the specified contents, given as a list of pairs\n * where the first value is the key and the second is the value.\n *\n * If multiple pairs have the same key, the resulting map will contain the value from the last of those pairs.\n *\n * Entries of the map are iterated in the order they were specified.\n *\n * The returned map is serializable (JVM).\n *\n * @sample samples.collections.Maps.Instantiation.mapFromPairs\n */\npublic fun <K, V> mapOf(vararg pairs: Pair<K, V>): Map<K, V> =\n    if (pairs.size > 0) pairs.toMap(LinkedHashMap(mapCapacity(pairs.size))) else emptyMap()\n\n/**\n * Returns an empty read-only map.\n *\n * The returned map is serializable (JVM).\n * @sample samples.collections.Maps.Instantiation.emptyReadOnlyMap\n */\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> mapOf(): Map<K, V> = emptyMap()\n\n/**\n * Returns an empty new [MutableMap].\n *\n * The returned map preserves the entry iteration order.\n * @sample samples.collections.Maps.Instantiation.emptyMutableMap\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> mutableMapOf(): MutableMap<K, V> = LinkedHashMap()\n\n/**\n * Returns a new [MutableMap] with the specified contents, given as a list of pairs\n * where the first component is the key and the second is the value.\n *\n * If multiple pairs have the same key, the resulting map will contain the value from the last of those pairs.\n *\n * Entries of the map are iterated in the order they were specified.\n *\n * @sample samples.collections.Maps.Instantiation.mutableMapFromPairs\n * @sample samples.collections.Maps.Instantiation.emptyMutableMap\n */\npublic fun <K, V> mutableMapOf(vararg pairs: Pair<K, V>): MutableMap<K, V> =\n    LinkedHashMap<K, V>(mapCapacity(pairs.size)).apply { putAll(pairs) }\n\n/**\n * Returns an empty new [HashMap].\n *\n * @sample samples.collections.Maps.Instantiation.emptyHashMap\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> hashMapOf(): HashMap<K, V> = HashMap<K, V>()\n\n/**\n * Returns a new [HashMap] with the specified contents, given as a list of pairs\n * where the first component is the key and the second is the value.\n *\n * @sample samples.collections.Maps.Instantiation.hashMapFromPairs\n */\npublic fun <K, V> hashMapOf(vararg pairs: Pair<K, V>): HashMap<K, V> = HashMap<K, V>(mapCapacity(pairs.size)).apply { putAll(pairs) }\n\n/**\n * Returns an empty new [LinkedHashMap].\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> linkedMapOf(): LinkedHashMap<K, V> = LinkedHashMap<K, V>()\n\n/**\n * Returns a new [LinkedHashMap] with the specified contents, given as a list of pairs\n * where the first component is the key and the second is the value.\n *\n * If multiple pairs have the same key, the resulting map will contain the value from the last of those pairs.\n *\n * Entries of the map are iterated in the order they were specified.\n *\n * @sample samples.collections.Maps.Instantiation.linkedMapFromPairs\n */\npublic fun <K, V> linkedMapOf(vararg pairs: Pair<K, V>): LinkedHashMap<K, V> = pairs.toMap(LinkedHashMap(mapCapacity(pairs.size)))\n\n/**\n * Builds a new read-only [Map] by populating a [MutableMap] using the given [builderAction]\n * and returning a read-only map with the same key-value pairs.\n *\n * The map passed as a receiver to the [builderAction] is valid only inside that function.\n * Using it outside of the function produces an unspecified behavior.\n *\n * Entries of the map are iterated in the order they were added by the [builderAction].\n *\n * @sample samples.collections.Builders.Maps.buildMapSample\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> buildMap(@BuilderInference builderAction: MutableMap<K, V>.() -> Unit): Map<K, V> {\n    contract { callsInPlace(builderAction, InvocationKind.EXACTLY_ONCE) }\n    return LinkedHashMap<K, V>().apply(builderAction)\n}\n\n/**\n * Builds a new read-only [Map] by populating a [MutableMap] using the given [builderAction]\n * and returning a read-only map with the same key-value pairs.\n *\n * The map passed as a receiver to the [builderAction] is valid only inside that function.\n * Using it outside of the function produces an unspecified behavior.\n *\n * [capacity] is used to hint the expected number of pairs added in the [builderAction].\n *\n * Entries of the map are iterated in the order they were added by the [builderAction].\n *\n * @throws IllegalArgumentException if the given [capacity] is negative.\n *\n * @sample samples.collections.Builders.Maps.buildMapSample\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> buildMap(capacity: Int, @BuilderInference builderAction: MutableMap<K, V>.() -> Unit): Map<K, V> {\n    contract { callsInPlace(builderAction, InvocationKind.EXACTLY_ONCE) }\n    checkBuilderCapacity(capacity)\n    return LinkedHashMap<K, V>(mapCapacity(capacity)).apply(builderAction)\n}\n\n/**\n * Calculate the initial capacity of a map.\n */\n@PublishedApi\ninternal expect fun mapCapacity(expectedSize: Int): Int\n\n/**\n * Checks a collection builder function capacity argument.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@PublishedApi\ninternal expect fun checkBuilderCapacity(capacity: Int)\n\n/**\n * Returns `true` if this map is not empty.\n * @sample samples.collections.Maps.Usage.mapIsNotEmpty\n */\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> Map<out K, V>.isNotEmpty(): Boolean = !isEmpty()\n\n/**\n * Returns `true` if this nullable map is either null or empty.\n * @sample samples.collections.Maps.Usage.mapIsNullOrEmpty\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> Map<out K, V>?.isNullOrEmpty(): Boolean {\n    contract {\n        returns(false) implies (this@isNullOrEmpty != null)\n    }\n\n    return this == null || isEmpty()\n}\n\n/**\n * Returns the [Map] if its not `null`, or the empty [Map] otherwise.\n *\n * @sample samples.collections.Maps.Usage.mapOrEmpty\n */\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> Map<K, V>?.orEmpty(): Map<K, V> = this ?: emptyMap()\n\n/**\n * Returns this map if it's not empty\n * or the result of calling [defaultValue] function if the map is empty.\n *\n * @sample samples.collections.Maps.Usage.mapIfEmpty\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun <M, R> M.ifEmpty(defaultValue: () -> R): R where M : Map<*, *>, M : R =\n    if (isEmpty()) defaultValue() else this\n\n/**\n * Checks if the map contains the given key.\n *\n * This method allows to use the `x in map` syntax for checking whether an object is contained in the map.\n *\n * @sample samples.collections.Maps.Usage.containsKey\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <@kotlin.internal.OnlyInputTypes K, V> Map<out K, V>.contains(key: K): Boolean = containsKey(key)\n\n/**\n * Returns the value corresponding to the given [key], or `null` if such a key is not present in the map.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <@kotlin.internal.OnlyInputTypes K, V> Map<out K, V>.get(key: K): V? =\n    @Suppress(\"UNCHECKED_CAST\") (this as Map<K, V>).get(key)\n\n/**\n * Allows to use the index operator for storing values in a mutable map.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<K, V>.set(key: K, value: V): Unit {\n    put(key, value)\n}\n\n/**\n * Returns `true` if the map contains the specified [key].\n *\n * Allows to overcome type-safety restriction of `containsKey` that requires to pass a key of type `K`.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <@kotlin.internal.OnlyInputTypes K> Map<out K, *>.containsKey(key: K): Boolean =\n    @Suppress(\"UNCHECKED_CAST\") (this as Map<K, *>).containsKey(key)\n\n/**\n * Returns `true` if the map maps one or more keys to the specified [value].\n *\n * Allows to overcome type-safety restriction of `containsValue` that requires to pass a value of type `V`.\n *\n * @sample samples.collections.Maps.Usage.containsValue\n */\n@Suppress(\"EXTENSION_SHADOWED_BY_MEMBER\") // false warning, extension takes precedence in some cases\n@kotlin.internal.InlineOnly\npublic inline fun <K, @kotlin.internal.OnlyInputTypes V> Map<K, V>.containsValue(value: V): Boolean = this.containsValue(value)\n\n\n/**\n * Removes the specified key and its corresponding value from this map.\n *\n * @return the previous value associated with the key, or `null` if the key was not present in the map.\n\n * Allows to overcome type-safety restriction of `remove` that requires to pass a key of type `K`.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <@kotlin.internal.OnlyInputTypes K, V> MutableMap<out K, V>.remove(key: K): V? =\n    @Suppress(\"UNCHECKED_CAST\") (this as MutableMap<K, V>).remove(key)\n\n/**\n * Returns the key component of the map entry.\n *\n * This method allows to use destructuring declarations when working with maps, for example:\n * ```\n * for ((key, value) in map) {\n *     // do something with the key and the value\n * }\n * ```\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> Map.Entry<K, V>.component1(): K = key\n\n/**\n * Returns the value component of the map entry.\n *\n * This method allows to use destructuring declarations when working with maps, for example:\n * ```\n * for ((key, value) in map) {\n *     // do something with the key and the value\n * }\n * ```\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> Map.Entry<K, V>.component2(): V = value\n\n/**\n * Converts entry to [Pair] with key being first component and value being second.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> Map.Entry<K, V>.toPair(): Pair<K, V> = Pair(key, value)\n\n/**\n * Returns the value for the given key, or the result of the [defaultValue] function if there was no entry for the given key.\n *\n * @sample samples.collections.Maps.Usage.getOrElse\n */\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> Map<K, V>.getOrElse(key: K, defaultValue: () -> V): V = get(key) ?: defaultValue()\n\n\ninternal inline fun <K, V> Map<K, V>.getOrElseNullable(key: K, defaultValue: () -> V): V {\n    val value = get(key)\n    if (value == null && !containsKey(key)) {\n        return defaultValue()\n    } else {\n        @Suppress(\"UNCHECKED_CAST\")\n        return value as V\n    }\n}\n\n/**\n * Returns the value for the given [key] or throws an exception if there is no such key in the map.\n *\n * If the map was created by [withDefault], resorts to its `defaultValue` provider function\n * instead of throwing an exception.\n *\n * @throws NoSuchElementException when the map doesn't contain a value for the specified key and\n * no implicit default value was provided for that map.\n */\n@SinceKotlin(\"1.1\")\npublic fun <K, V> Map<K, V>.getValue(key: K): V = getOrImplicitDefault(key)\n\n/**\n * Returns the value for the given key. If the key is not found in the map, calls the [defaultValue] function,\n * puts its result into the map under the given key and returns it.\n *\n * Note that the operation is not guaranteed to be atomic if the map is being modified concurrently.\n *\n * @sample samples.collections.Maps.Usage.getOrPut\n */\npublic inline fun <K, V> MutableMap<K, V>.getOrPut(key: K, defaultValue: () -> V): V {\n    val value = get(key)\n    return if (value == null) {\n        val answer = defaultValue()\n        put(key, answer)\n        answer\n    } else {\n        value\n    }\n}\n\n/**\n * Returns an [Iterator] over the entries in the [Map].\n *\n * @sample samples.collections.Maps.Usage.forOverEntries\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> Map<out K, V>.iterator(): Iterator<Map.Entry<K, V>> = entries.iterator()\n\n/**\n * Returns a [MutableIterator] over the mutable entries in the [MutableMap].\n *\n */\n@kotlin.jvm.JvmName(\"mutableIterator\")\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<K, V>.iterator(): MutableIterator<MutableMap.MutableEntry<K, V>> = entries.iterator()\n\n/**\n * Populates the given [destination] map with entries having the keys of this map and the values obtained\n * by applying the [transform] function to each entry in this [Map].\n */\npublic inline fun <K, V, R, M : MutableMap<in K, in R>> Map<out K, V>.mapValuesTo(destination: M, transform: (Map.Entry<K, V>) -> R): M {\n    return entries.associateByTo(destination, { it.key }, transform)\n}\n\n/**\n * Populates the given [destination] map with entries having the keys obtained\n * by applying the [transform] function to each entry in this [Map] and the values of this map.\n *\n * In case if any two entries are mapped to the equal keys, the value of the latter one will overwrite\n * the value associated with the former one.\n */\npublic inline fun <K, V, R, M : MutableMap<in R, in V>> Map<out K, V>.mapKeysTo(destination: M, transform: (Map.Entry<K, V>) -> R): M {\n    return entries.associateByTo(destination, transform, { it.value })\n}\n\n/**\n * Puts all the given [pairs] into this [MutableMap] with the first component in the pair being the key and the second the value.\n */\npublic fun <K, V> MutableMap<in K, in V>.putAll(pairs: Array<out Pair<K, V>>): Unit {\n    for ((key, value) in pairs) {\n        put(key, value)\n    }\n}\n\n/**\n * Puts all the elements of the given collection into this [MutableMap] with the first component in the pair being the key and the second the value.\n */\npublic fun <K, V> MutableMap<in K, in V>.putAll(pairs: Iterable<Pair<K, V>>): Unit {\n    for ((key, value) in pairs) {\n        put(key, value)\n    }\n}\n\n/**\n * Puts all the elements of the given sequence into this [MutableMap] with the first component in the pair being the key and the second the value.\n */\npublic fun <K, V> MutableMap<in K, in V>.putAll(pairs: Sequence<Pair<K, V>>): Unit {\n    for ((key, value) in pairs) {\n        put(key, value)\n    }\n}\n\n/**\n * Returns a new map with entries having the keys of this map and the values obtained by applying the [transform]\n * function to each entry in this [Map].\n *\n * The returned map preserves the entry iteration order of the original map.\n *\n * @sample samples.collections.Maps.Transformations.mapValues\n */\npublic inline fun <K, V, R> Map<out K, V>.mapValues(transform: (Map.Entry<K, V>) -> R): Map<K, R> {\n    return mapValuesTo(LinkedHashMap<K, R>(mapCapacity(size)), transform) // .optimizeReadOnlyMap()\n}\n\n/**\n * Returns a new Map with entries having the keys obtained by applying the [transform] function to each entry in this\n * [Map] and the values of this map.\n *\n * In case if any two entries are mapped to the equal keys, the value of the latter one will overwrite\n * the value associated with the former one.\n *\n * The returned map preserves the entry iteration order of the original map.\n *\n * @sample samples.collections.Maps.Transformations.mapKeys\n */\npublic inline fun <K, V, R> Map<out K, V>.mapKeys(transform: (Map.Entry<K, V>) -> R): Map<R, V> {\n    return mapKeysTo(LinkedHashMap<R, V>(mapCapacity(size)), transform) // .optimizeReadOnlyMap()\n}\n\n/**\n * Returns a map containing all key-value pairs with keys matching the given [predicate].\n *\n * The returned map preserves the entry iteration order of the original map.\n * @sample samples.collections.Maps.Filtering.filterKeys\n */\npublic inline fun <K, V> Map<out K, V>.filterKeys(predicate: (K) -> Boolean): Map<K, V> {\n    val result = LinkedHashMap<K, V>()\n    for (entry in this) {\n        if (predicate(entry.key)) {\n            result.put(entry.key, entry.value)\n        }\n    }\n    return result\n}\n\n/**\n * Returns a map containing all key-value pairs with values matching the given [predicate].\n *\n * The returned map preserves the entry iteration order of the original map.\n *  @sample samples.collections.Maps.Filtering.filterValues\n */\npublic inline fun <K, V> Map<out K, V>.filterValues(predicate: (V) -> Boolean): Map<K, V> {\n    val result = LinkedHashMap<K, V>()\n    for (entry in this) {\n        if (predicate(entry.value)) {\n            result.put(entry.key, entry.value)\n        }\n    }\n    return result\n}\n\n\n/**\n * Appends all entries matching the given [predicate] into the mutable map given as [destination] parameter.\n *\n * @return the destination map.\n * @sample samples.collections.Maps.Filtering.filterTo\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> Map<out K, V>.filterTo(destination: M, predicate: (Map.Entry<K, V>) -> Boolean): M {\n    for (element in this) {\n        if (predicate(element)) {\n            destination.put(element.key, element.value)\n        }\n    }\n    return destination\n}\n\n/**\n * Returns a new map containing all key-value pairs matching the given [predicate].\n *\n * The returned map preserves the entry iteration order of the original map.\n * @sample samples.collections.Maps.Filtering.filter\n */\npublic inline fun <K, V> Map<out K, V>.filter(predicate: (Map.Entry<K, V>) -> Boolean): Map<K, V> {\n    return filterTo(LinkedHashMap<K, V>(), predicate)\n}\n\n/**\n * Appends all entries not matching the given [predicate] into the given [destination].\n *\n * @return the destination map.\n * @sample samples.collections.Maps.Filtering.filterNotTo\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> Map<out K, V>.filterNotTo(destination: M, predicate: (Map.Entry<K, V>) -> Boolean): M {\n    for (element in this) {\n        if (!predicate(element)) {\n            destination.put(element.key, element.value)\n        }\n    }\n    return destination\n}\n\n/**\n * Returns a new map containing all key-value pairs not matching the given [predicate].\n *\n * The returned map preserves the entry iteration order of the original map.\n * @sample samples.collections.Maps.Filtering.filterNot\n */\npublic inline fun <K, V> Map<out K, V>.filterNot(predicate: (Map.Entry<K, V>) -> Boolean): Map<K, V> {\n    return filterNotTo(LinkedHashMap<K, V>(), predicate)\n}\n\n/**\n * Returns a new map containing all key-value pairs from the given collection of pairs.\n *\n * The returned map preserves the entry iteration order of the original collection.\n * If any of two pairs would have the same key the last one gets added to the map.\n */\npublic fun <K, V> Iterable<Pair<K, V>>.toMap(): Map<K, V> {\n    if (this is Collection) {\n        return when (size) {\n            0 -> emptyMap()\n            1 -> mapOf(if (this is List) this[0] else iterator().next())\n            else -> toMap(LinkedHashMap<K, V>(mapCapacity(size)))\n        }\n    }\n    return toMap(LinkedHashMap<K, V>()).optimizeReadOnlyMap()\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs from the given collection of pairs.\n */\npublic fun <K, V, M : MutableMap<in K, in V>> Iterable<Pair<K, V>>.toMap(destination: M): M =\n    destination.apply { putAll(this@toMap) }\n\n/**\n * Returns a new map containing all key-value pairs from the given array of pairs.\n *\n * The returned map preserves the entry iteration order of the original array.\n * If any of two pairs would have the same key the last one gets added to the map.\n */\npublic fun <K, V> Array<out Pair<K, V>>.toMap(): Map<K, V> = when (size) {\n    0 -> emptyMap()\n    1 -> mapOf(this[0])\n    else -> toMap(LinkedHashMap<K, V>(mapCapacity(size)))\n}\n\n/**\n *  Populates and returns the [destination] mutable map with key-value pairs from the given array of pairs.\n */\npublic fun <K, V, M : MutableMap<in K, in V>> Array<out Pair<K, V>>.toMap(destination: M): M =\n    destination.apply { putAll(this@toMap) }\n\n/**\n * Returns a new map containing all key-value pairs from the given sequence of pairs.\n *\n * The returned map preserves the entry iteration order of the original sequence.\n * If any of two pairs would have the same key the last one gets added to the map.\n */\npublic fun <K, V> Sequence<Pair<K, V>>.toMap(): Map<K, V> = toMap(LinkedHashMap<K, V>()).optimizeReadOnlyMap()\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs from the given sequence of pairs.\n */\npublic fun <K, V, M : MutableMap<in K, in V>> Sequence<Pair<K, V>>.toMap(destination: M): M =\n    destination.apply { putAll(this@toMap) }\n\n/**\n * Returns a new read-only map containing all key-value pairs from the original map.\n *\n * The returned map preserves the entry iteration order of the original map.\n */\n@SinceKotlin(\"1.1\")\npublic fun <K, V> Map<out K, V>.toMap(): Map<K, V> = when (size) {\n    0 -> emptyMap()\n    1 -> toSingletonMap()\n    else -> toMutableMap()\n}\n\n/**\n * Returns a new mutable map containing all key-value pairs from the original map.\n *\n * The returned map preserves the entry iteration order of the original map.\n */\n@SinceKotlin(\"1.1\")\npublic fun <K, V> Map<out K, V>.toMutableMap(): MutableMap<K, V> = LinkedHashMap(this)\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs from the given map.\n */\n@SinceKotlin(\"1.1\")\npublic fun <K, V, M : MutableMap<in K, in V>> Map<out K, V>.toMap(destination: M): M =\n    destination.apply { putAll(this@toMap) }\n\n/**\n * Creates a new read-only map by replacing or adding an entry to this map from a given key-value [pair].\n *\n * The returned map preserves the entry iteration order of the original map.\n * The [pair] is iterated in the end if it has a unique key.\n */\npublic operator fun <K, V> Map<out K, V>.plus(pair: Pair<K, V>): Map<K, V> =\n    if (this.isEmpty()) mapOf(pair) else LinkedHashMap(this).apply { put(pair.first, pair.second) }\n\n/**\n * Creates a new read-only map by replacing or adding entries to this map from a given collection of key-value [pairs].\n *\n * The returned map preserves the entry iteration order of the original map.\n * Those [pairs] with unique keys are iterated in the end in the order of [pairs] collection.\n */\npublic operator fun <K, V> Map<out K, V>.plus(pairs: Iterable<Pair<K, V>>): Map<K, V> =\n    if (this.isEmpty()) pairs.toMap() else LinkedHashMap(this).apply { putAll(pairs) }\n\n/**\n * Creates a new read-only map by replacing or adding entries to this map from a given array of key-value [pairs].\n *\n * The returned map preserves the entry iteration order of the original map.\n * Those [pairs] with unique keys are iterated in the end in the order of [pairs] array.\n */\npublic operator fun <K, V> Map<out K, V>.plus(pairs: Array<out Pair<K, V>>): Map<K, V> =\n    if (this.isEmpty()) pairs.toMap() else LinkedHashMap(this).apply { putAll(pairs) }\n\n/**\n * Creates a new read-only map by replacing or adding entries to this map from a given sequence of key-value [pairs].\n *\n * The returned map preserves the entry iteration order of the original map.\n * Those [pairs] with unique keys are iterated in the end in the order of [pairs] sequence.\n */\npublic operator fun <K, V> Map<out K, V>.plus(pairs: Sequence<Pair<K, V>>): Map<K, V> =\n    LinkedHashMap(this).apply { putAll(pairs) }.optimizeReadOnlyMap()\n\n/**\n * Creates a new read-only map by replacing or adding entries to this map from another [map].\n *\n * The returned map preserves the entry iteration order of the original map.\n * Those entries of another [map] that are missing in this map are iterated in the end in the order of that [map].\n */\npublic operator fun <K, V> Map<out K, V>.plus(map: Map<out K, V>): Map<K, V> =\n    LinkedHashMap(this).apply { putAll(map) }\n\n\n/**\n * Appends or replaces the given [pair] in this mutable map.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<in K, in V>.plusAssign(pair: Pair<K, V>) {\n    put(pair.first, pair.second)\n}\n\n/**\n * Appends or replaces all pairs from the given collection of [pairs] in this mutable map.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<in K, in V>.plusAssign(pairs: Iterable<Pair<K, V>>) {\n    putAll(pairs)\n}\n\n/**\n * Appends or replaces all pairs from the given array of [pairs] in this mutable map.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<in K, in V>.plusAssign(pairs: Array<out Pair<K, V>>) {\n    putAll(pairs)\n}\n\n/**\n * Appends or replaces all pairs from the given sequence of [pairs] in this mutable map.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<in K, in V>.plusAssign(pairs: Sequence<Pair<K, V>>) {\n    putAll(pairs)\n}\n\n/**\n * Appends or replaces all entries from the given [map] in this mutable map.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<in K, in V>.plusAssign(map: Map<K, V>) {\n    putAll(map)\n}\n\n/**\n * Returns a map containing all entries of the original map except the entry with the given [key].\n *\n * The returned map preserves the entry iteration order of the original map.\n */\n@SinceKotlin(\"1.1\")\npublic operator fun <K, V> Map<out K, V>.minus(key: K): Map<K, V> =\n    this.toMutableMap().apply { minusAssign(key) }.optimizeReadOnlyMap()\n\n/**\n * Returns a map containing all entries of the original map except those entries\n * the keys of which are contained in the given [keys] collection.\n *\n * The returned map preserves the entry iteration order of the original map.\n */\n@SinceKotlin(\"1.1\")\npublic operator fun <K, V> Map<out K, V>.minus(keys: Iterable<K>): Map<K, V> =\n    this.toMutableMap().apply { minusAssign(keys) }.optimizeReadOnlyMap()\n\n/**\n * Returns a map containing all entries of the original map except those entries\n * the keys of which are contained in the given [keys] array.\n *\n * The returned map preserves the entry iteration order of the original map.\n */\n@SinceKotlin(\"1.1\")\npublic operator fun <K, V> Map<out K, V>.minus(keys: Array<out K>): Map<K, V> =\n    this.toMutableMap().apply { minusAssign(keys) }.optimizeReadOnlyMap()\n\n/**\n * Returns a map containing all entries of the original map except those entries\n * the keys of which are contained in the given [keys] sequence.\n *\n * The returned map preserves the entry iteration order of the original map.\n */\n@SinceKotlin(\"1.1\")\npublic operator fun <K, V> Map<out K, V>.minus(keys: Sequence<K>): Map<K, V> =\n    this.toMutableMap().apply { minusAssign(keys) }.optimizeReadOnlyMap()\n\n/**\n * Removes the entry with the given [key] from this mutable map.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<K, V>.minusAssign(key: K) {\n    remove(key)\n}\n\n/**\n * Removes all entries the keys of which are contained in the given [keys] collection from this mutable map.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<K, V>.minusAssign(keys: Iterable<K>) {\n    this.keys.removeAll(keys)\n}\n\n/**\n * Removes all entries the keys of which are contained in the given [keys] array from this mutable map.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<K, V>.minusAssign(keys: Array<out K>) {\n    this.keys.removeAll(keys)\n}\n\n/**\n * Removes all entries from the keys of which are contained in the given [keys] sequence from this mutable map.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<K, V>.minusAssign(keys: Sequence<K>) {\n    this.keys.removeAll(keys)\n}\n\n\n// do not expose for now @PublishedApi\ninternal fun <K, V> Map<K, V>.optimizeReadOnlyMap() = when (size) {\n    0 -> emptyMap()\n    1 -> toSingletonMapOrSelf()\n    else -> this\n}\n",null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"names":[],"mappings":"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"}